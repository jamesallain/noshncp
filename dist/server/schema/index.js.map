{"version":3,"sources":["../../../js/server/schema/index.js"],"names":["_db","profileCollectionName","userCollectionName","entityGet","query","collectionName","db","Promise","resolve","collection","findOne","err","entity","promisedArrayGet","sort","limit","find","toArray","entities","inputPresentCheck","input","Object","keys","reduce","memo","key","message","source","emailValidCheck","email","validate","entityCountGet","count","userUniqueCheck","then","userRegisteredCheck","passwordHash","password","salt","genSaltSync","hashSync","passwordGenerate","isSignedinCheck","req","user","isTheUserCheck","userGlobalId","_userId","userLocalId","id","toString","isCreatorCheck","profileGlobalId","_profileId","profileLocalId","Viewer","viewerGet","assign","_id","Profile","profileGet","profile","globalId","localId","type","obj","viewerType","profileType","nodeInterface","nodeField","languageType","name","fields","language","level","skillType","skillLocalId","recommendations","experienceType","experienceLocalId","company","description","country","region","location","since","title","until","educationType","educationLocalId","major","date","degree","fullName","industry","languages","previousCompanies","profilePicture","skills","experiences","educations","currentCompany","educationTitle","interfaces","nodeType","profileConnectionType","connectionType","userType","profileId","viewerLocalId","parent","args","searchTerm","connectionArgs","q","$text","$search","queryType","node","viewer","UserCreateMutation","inputFields","outputFields","field","mutateAndGetPayload","findAndModify","$set","upsert","new","value","logIn","UserUpdateMutation","UserDeleteMutation","remove","undefined","logout","UserSigninMutation","authenticate","info","body","UserSignoutMutation","_","UserPasswordResetMutation","ProfileUpdateMutation","ProfileExperienceCreateMutation","$push","$each","$position","ProfileExperienceUpdateMutation","experienceId","experienceGlobalId","ProfileExperienceDeleteMutation","$pull","ProfileEducationCreateMutation","ProfileEducationUpdateMutation","educationId","educationGlobalId","ProfileEducationDeleteMutation","ProfileSkillCreateMutation","ProfileSkillUpdateMutation","skillId","skillGlobalId","ProfileSkillDeleteMutation","ProfilePictureUpdateMutation","file","writeFile","join","process","cwd","buffer","mutationType","userCreate","userUpdate","userDelete","userSignin","userSignout","userPasswordReset","profileUpdate","profileExperienceCreate","profileExperienceUpdate","profileExperienceDelete","profileEducationCreate","profileEducationUpdate","profileEducationDelete","profileSkillCreate","profileSkillUpdate","profileSkillDelete","profilePictureUpdate","schemaType","mutation","schemaGet"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;AASA;;AASA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAIA,YAAJ;AACA,IAAMC,wBAAwB,SAA9B;AACA,IAAMC,qBAAqB,MAA3B;;AAEA,IAAMC,YAAY,SAAZA,SAAY,CAACC,KAAD,EAAQC,cAAR,EAAwBC,EAAxB,EAA+B;AAC/C,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9B,WAAOF,GAAGG,UAAH,CAAcJ,cAAd,EACJK,OADI,CAEHN,KAFG,EAGH,UAACO,GAAD,EAAMC,MAAN,EAAiB;AACf,aAAOJ,QAAQI,MAAR,CAAP;AACD,KALE,CAAP;AAOD,GARM,CAAP;AASD,CAVD;;AAYA,IAAMC,mBAAmB,SAAnBA,gBAAmB,CAACT,KAAD,EAAQU,IAAR,EAAcC,KAAd,EAAqBV,cAArB,EAAqCC,EAArC,EAA4C;AACnE,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9B,WAAOF,GAAGG,UAAH,CAAcJ,cAAd,EACJW,IADI,CACCZ,KADD,EAEJU,IAFI,CAECA,IAFD,EAGJC,KAHI,CAGEA,KAHF,EAIJE,OAJI,CAII,UAACN,GAAD,EAAMO,QAAN,EAAmB;AAC1B,aAAOV,QAAQU,QAAR,CAAP;AACD,KANI,CAAP;AAOD,GARM,CAAP;AASD,CAVD;;AAYA,IAAMC,oBAAoB,SAApBA,iBAAoB,CAACC,KAAD,EAAW;AACnC,SAAOC,OAAOC,IAAP,CAAYF,KAAZ,EACJG,MADI,CACG,UAACC,IAAD,EAAOC,GAAP,EAAe;AACrB,QAAI,CAACD,IAAL,EAAW;AACT,UAAI,CAACJ,MAAMK,GAAN,CAAL,EAAiB;AACf,eAAO;AACLC,mBAAS,gBADJ;AAELC,kBAAQF;AAFH,SAAP;AAID;;AAED,aAAO,IAAP;AACD;;AAED,WAAOD,IAAP;AAED,GAfI,EAeF,IAfE,CAAP;AAgBD,CAjBD;;AAmBA,IAAMI,kBAAkB,SAAlBA,eAAkB,CAACC,KAAD,EAAW;AACjC,SAAQ,yBAAeC,QAAf,CAAwBD,KAAxB,CAAD,GACL,IADK,GAEJ;AACCH,aAAS,SADV;AAECC,YAAQ;AAFT,GAFH;AAMD,CAPD;;AASA,IAAMI,iBAAiB,SAAjBA,cAAiB,CAAC3B,KAAD,EAAQC,cAAR,EAAwBC,EAAxB,EAA+B;AACpD,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9B,WAAOF,GAAGG,UAAH,CAAcJ,cAAd,EACJW,IADI,CACCZ,KADD,EAEJ4B,KAFI,CAEE,UAACrB,GAAD,EAAMqB,KAAN,EAAgB;AACrB,aAAOxB,QAAQwB,KAAR,CAAP;AACD,KAJI,CAAP;AAKD,GANM,CAAP;AAOD,CARD;;AAUA,IAAMC,kBAAkB,SAAlBA,eAAkB,CAACJ,KAAD,EAAQvB,EAAR,EAAe;AACrC,SAAOyB,eACL,EAACF,YAAD,EADK,EAEL3B,kBAFK,EAGLI,EAHK,EAKJ4B,IALI,CAKC,UAACF,KAAD,EAAW;AACf,QAAIA,KAAJ,EAAW;AACT,aAAO;AACLN,iBAAS,YADJ;AAELC,gBAAQ;AAFH,OAAP;AAID;;AAED,WAAO,IAAP;AACD,GAdI,CAAP;AAeD,CAhBD;;AAkBA,IAAMQ,sBAAsB,SAAtBA,mBAAsB,CAACN,KAAD,EAAQvB,EAAR,EAAe;AACzC,SAAOyB,eACL,EAACF,YAAD,EADK,EAEL3B,kBAFK,EAGLI,EAHK,EAKJ4B,IALI,CAKC,UAACF,KAAD,EAAW;AACf,QAAI,CAACA,KAAL,EAAY;AACV,aAAO;AACLN,iBAAS,gBADJ;AAELC,gBAAQ;AAFH,OAAP;AAID;;AAED,WAAO,IAAP;AACD,GAdI,CAAP;AAeD,CAhBD;;AAkBA,IAAMS,eAAe,SAAfA,YAAe,CAACC,QAAD,EAAc;AACjC,MAAMC,OAAO,mBAASC,WAAT,CAAqB,CAArB,CAAb;AACA,SAAO,mBAASC,QAAT,CAAkBH,QAAlB,EAA4BC,IAA5B,CAAP;AACD,CAHD;;AAKA,IAAMG,mBAAmB,SAAnBA,gBAAmB,GAAM;AAC7B,SAAO,kCAAP;AACD,CAFD;;AAIA,IAAMC,kBAAkB,SAAlBA,eAAkB,CAACC,GAAD,EAAS;AAC/B,SAAQ,CAACA,IAAIC,IAAN,GACJ;AACClB,aAAS,cADV;AAECC,YAAQ;AAFT,GADI,GAKL,IALF;AAMD,CAPD;;AASA,IAAMkB,iBAAiB,SAAjBA,cAAiB,CAACC,YAAD,EAAeC,OAAf,EAA2B;AAAA,sBACtB,gCAAaD,YAAb,CADsB;AAAA,MACrCE,WADqC,iBACzCC,EADyC;;AAGhD,SAAQD,YAAYE,QAAZ,OAA2BH,QAAQG,QAAR,EAA5B,GACJ;AACCxB,aAAS,gBADV;AAECC,YAAQ;AAFT,GADI,GAKL,IALF;AAMD,CATD;;AAWA,IAAMwB,iBAAiB,SAAjBA,cAAiB,CAACC,eAAD,EAAkBC,UAAlB,EAAiC;AAAA,uBACzB,gCAAaD,eAAb,CADyB;AAAA,MAC3CE,cAD2C,kBAC/CL,EAD+C;;AAGtD,SAAQK,eAAeJ,QAAf,OAA8BG,WAAWH,QAAX,EAA/B,GACJ;AACCxB,aAAS,gBADV;AAECC,YAAQ;AAFT,GADI,GAKL,IALF;AAMD,CATD;;IAWM4B,M;;;;;;;;;qBAAelC,M;;AACrB,IAAMmC,YAAY,SAAZA,SAAY,GAAM;AACtB,SAAOnC,OAAOoC,MAAP,CACL,IAAIF,MAAJ,EADK,EAEL;AACEG,SAAK;AADP,GAFK,CAAP;AAMD,CAPD;;IASMC,O;;;;;;;;;sBAAgBtC,M;;AACtB,IAAMuC,aAAa,SAAbA,UAAa,CAACN,cAAD,EAAoB;AACrC,SAAOnD,UAAUmD,cAAV,EAA0BrD,qBAA1B,EAAiDD,GAAjD,EACJkC,IADI,CACC,UAAC2B,OAAD,EAAa;AACjB,WAAOxC,OAAOoC,MAAP,CACL,IAAIE,OAAJ,EADK,EAELE,OAFK,CAAP;AAID,GANI,CAAP;AAOD,CARD;;uBAaI,mCACF,UAACC,QAAD,EAAc;AAAA,uBACgB,gCAAaA,QAAb,CADhB;AAAA,MACDC,OADC,kBACLd,EADK;AAAA,MACQe,IADR,kBACQA,IADR;;AAGZ,UAAQA,IAAR;AACE,SAAK,QAAL;AACE,aAAOR,UAAUO,OAAV,CAAP;AACF,SAAK,SAAL;AACE,aAAOH,WAAWG,OAAX,CAAP;AACF;AACE,aAAO,IAAP;AANJ;AAQD,CAZC,EAaF,UAACE,GAAD,EAAS;AACP,UAAQ,IAAR;AACE,SAAMA,eAAeV,MAArB;AACE,aAAOW,UAAP;AACF,SAAMD,eAAeN,OAArB;AACE,aAAOQ,WAAP;AACF;AACE,aAAO,IAAP;AANJ;AAQD,CAtBC,C;IAFFC,a,oBAAAA,a;IACAC,S,oBAAAA,S;;AA0BF,IAAMC,eAAe,+BAAsB;AACzCC,QAAM,UADmC;AAEzCC,QAFyC,oBAEhC;AACP,WAAO;AACLC,gBAAU,EAACT,4BAAD,EADL;AAELU,aAAO,EAACV,4BAAD;AAFF,KAAP;AAID;AAPwC,CAAtB,CAArB;;AAUA,IAAMW,YAAY,+BAAsB;AACtCJ,QAAM,OADgC;AAEtCC,QAFsC,oBAE7B;AACP,WAAO;AACLvB,UAAI,iCAAc,OAAd,EAAuB,gBAAyB;AAAA,YAAlB2B,YAAkB,QAAvBlB,GAAuB;;AAClD,eAAOkB,YAAP;AACD,OAFG,CADC;AAILlB,WAAK,EAACM,wBAAD,EAJA;AAKLO,YAAM,EAACP,4BAAD,EALD;AAMLa,uBAAiB,EAACb,4BAAD;AANZ,KAAP;AAQD;AAXqC,CAAtB,CAAlB;;AAcA,IAAMc,iBAAiB,+BAAsB;AAC3CP,QAAM,YADqC;AAE3CC,QAF2C,oBAElC;AACP,WAAO;AACLvB,UAAI,iCAAc,YAAd,EAA4B,iBAA8B;AAAA,YAAvB8B,iBAAuB,SAA5BrB,GAA4B;;AAC5D,eAAOqB,iBAAP;AACD,OAFG,CADC;AAILrB,WAAK,EAACM,wBAAD,EAJA;AAKLgB,eAAS,EAAChB,4BAAD,EALJ;AAMLiB,mBAAa,EAACjB,4BAAD,EANR;AAOLkB,eAAS,EAAClB,4BAAD,EAPJ;AAQLmB,cAAQ,EAACnB,4BAAD,EARH;AASLoB,gBAAU,EAACpB,4BAAD,EATL;AAULqB,aAAO,EAACrB,4BAAD,EAVF;AAWLsB,aAAO,EAACtB,4BAAD,EAXF;AAYLuB,aAAO,EAACvB,4BAAD;AAZF,KAAP;AAcD;AAjB0C,CAAtB,CAAvB;;AAoBA,IAAMwB,gBAAgB,+BAAsB;AAC1CjB,QAAM,WADoC;AAE1CC,QAF0C,oBAEjC;AACP,WAAO;AACLvB,UAAI,iCAAc,WAAd,EAA2B,iBAA6B;AAAA,YAAtBwC,gBAAsB,SAA3B/B,GAA2B;;AAC1D,eAAO+B,gBAAP;AACD,OAFG,CADC;AAIL/B,WAAK,EAACM,wBAAD,EAJA;AAKL0B,aAAO,EAAC1B,4BAAD,EALF;AAML2B,YAAM,EAAC3B,4BAAD,EAND;AAOL4B,cAAQ,EAAC5B,4BAAD,EAPH;AAQLsB,aAAO,EAACtB,4BAAD;AARF,KAAP;AAUD;AAbyC,CAAtB,CAAtB;;AAgBA,IAAMG,cAAc,+BAAsB;AACxCI,QAAM,SADkC;AAExCC,QAFwC,oBAE/B;AACP,WAAO;AACLvB,UAAI,iCAAc,SAAd,EAAyB,iBAA2B;AAAA,YAApBK,cAAoB,SAAzBI,GAAyB;;AACtD,eAAOJ,cAAP;AACD,OAFG,CADC;AAILI,WAAK,EAACM,wBAAD,EAJA;AAKL6B,gBAAU,EAAC7B,4BAAD,EALL;AAML8B,gBAAU,EAAC9B,4BAAD,EANL;AAOL+B,iBAAW,EAAC/B,MAAM,yBAAgBM,YAAhB,CAAP,EAPN;AAQL0B,yBAAmB,EAAChC,MAAM,gDAAP,EARd;AASLiC,sBAAgB,EAACjC,4BAAD,EATX;AAULkC,cAAQ,EAAClC,MAAM,yBAAgBW,SAAhB,CAAP,EAVH;AAWLW,aAAO,EAACtB,4BAAD,EAXF;AAYLmC,mBAAa,EAACnC,MAAM,yBAAgBc,cAAhB,CAAP,EAZR;AAaLsB,kBAAY,EAACpC,MAAM,yBAAgBwB,aAAhB,CAAP,EAbP;AAcLa,sBAAgB,EAACrC,4BAAD,EAdX;AAeLsC,sBAAgB,EAACtC,4BAAD,EAfX;AAgBLkB,eAAS,EAAClB,4BAAD,EAhBJ;AAiBLmB,cAAQ,EAACnB,4BAAD;AAjBH,KAAP;AAmBD,GAtBuC;;AAuBxCuC,cAAY,CAACnC,aAAD;AAvB4B,CAAtB,CAApB;;4BA4BI,yCAAsB;AACxBG,QAAM,SADkB;AAExBiC,YAAUrC;AAFc,CAAtB,C;IADcsC,qB,yBAAhBC,c;;AAMF,IAAMC,WAAW,+BAAsB;AACrCpC,QAAM,MAD+B;AAErCC,QAFqC,oBAE5B;AACP,WAAO;AACLvB,UAAI,iCAAc,MAAd,EAAsB,iBAAwB;AAAA,YAAjBD,WAAiB,SAAtBU,GAAsB;;AAChD,eAAOV,WAAP;AACD,OAFG,CADC;AAILU,WAAK,EAACM,wBAAD,EAJA;AAKLnC,aAAO,EAACmC,4BAAD,EALF;AAML3B,gBAAU,EAAC2B,4BAAD,EANL;AAOL4C,iBAAW,iCAAc,SAAd,EAAyB,iBAAkC;AAAA,YAApBtD,cAAoB,SAAhCD,UAAgC;;AACpE,eAAOC,cAAP;AACD,OAFU,CAPN;AAULD,kBAAY,EAACW,wBAAD;AAVP,KAAP;AAYD;AAfoC,CAAtB,CAAjB;;AAkBA,IAAME,aAAa,+BAAsB;AACvCK,QAAM,QADiC;AAEvCC,QAFuC,oBAE9B;AACP,WAAO;AACLvB,UAAI,iCAAc,QAAd,EAAwB,iBAA0B;AAAA,YAAnB4D,aAAmB,SAAxBnD,GAAwB;;AACpD,eAAOmD,aAAP;AACD,OAFG,CADC;AAILnD,WAAK,EAACM,wBAAD,EAJA;AAKLpB,YAAM;AACJoB,cAAM2C,QADF;AAEJnG,eAFI,mBAEIsG,MAFJ,EAEYC,IAFZ,SAEiC;AAAA,cAARnE,IAAQ,SAAdD,GAAc,CAARC,IAAQ;;AACnC,iBAAOA,QAAQ,EAAf;AACD;AAJG,OALD;AAWLiB,eAAS;AACPG,cAAMyC,qBADC;AAEPM;AACE9D,cAAI,EAACe,wBAAD,EADN;AAEEgD,sBAAY,EAAChD,4BAAD;AAFd,wCAFO;AAOPxD,eAPO,mBAOCsG,MAPD,iBAOqE;AAAA,cAAvD1D,eAAuD,SAA3DH,EAA2D;AAAA,cAAtC+D,UAAsC,SAAtCA,UAAsC;AAAA,cAAvBC,cAAuB;AAAA,cAAL3G,EAAK,UAALA,EAAK;;AAC1E,cAAMF,QAAS,YAAM;AACnB,gBAAM8G,IAAI,EAAV;;AAEA,gBAAI9D,eAAJ,EAAqB;AAAA,mCACU,gCAAaA,eAAb,CADV;AAAA,kBACRE,cADQ,kBACZL,EADY;;AAGnB5B,qBAAOoC,MAAP,CACEyD,CADF,EAEE,EAACxD,KAAK,sBAAaJ,cAAb,CAAN,EAFF;AAID;;AAED,gBAAI0D,UAAJ,EAAgB;AACd3F,qBAAOoC,MAAP,CACEyD,CADF,EAEE;AACEC,uBAAO;AACLC,iCAAcJ,UAAd;AADK;AADT,eAFF;AAQD;;AAED,mBAAOE,CAAP;AACD,WAxBa,EAAd;AAyBA,cAAMpG,OAAO,EAAC4C,KAAK,CAAC,CAAP,EAAb;AACA,cAAM3C,QAAQ,CAAd;;AAEA,iBAAO,+CACLF,iBACET,KADF,EAEEU,IAFF,EAGEC,KAHF,EAIEd,qBAJF,EAKEK,EALF,CADK,EAQL2G,cARK,CAAP;AAUD;AA9CM;AAXJ,KAAP;AA4DD,GA/DsC;;AAgEvCV,cAAY,CAACnC,aAAD;AAhE2B,CAAtB,CAAnB;;AAmEA,IAAMiD,YAAY,+BAAsB;AACtC9C,QAAM,OADgC;AAEtCC,QAFsC,oBAE7B;AACP,WAAO;AACL8C,YAAMjD,SADD;AAELkD,cAAQ;AACNvD,cAAME,UADA;AAEN1D,eAFM,qBAEI;AACR,iBAAOgD,WAAP;AACD;AAJK;AAFH,KAAP;AASD;AAZqC,CAAtB,CAAlB;;AAeA,IAAMgE,qBAAqB,gDAA6B;AACtDjD,QAAM,YADgD;AAEtDkD,eAAa;AACX5F,WAAO,EAACmC,MAAM,mDAAP,EADI;AAEX3B,cAAU,EAAC2B,MAAM,mDAAP;AAFC,GAFyC;AAMtD0D,gBAAc;AACZH,YAAQ;AACNvD,YAAME,UADA;AAEN1D,aAFM,qBAEI;AACR,eAAOgD,WAAP;AACD;AAJK,KADI;AAOZmE,WAAO;AACL3D,YAAM2C,QADD;AAELnG,aAFK,mBAEG8G,IAFH,EAES;AACZ,eAAOA,IAAP;AACD;AAJI;AAPK,GANwC;AAoBhDM,qBApBgD,+CAoBE;AAAA;;AAAA,QAA7B/F,KAA6B,UAA7BA,KAA6B;AAAA,QAAtBQ,QAAsB,UAAtBA,QAAsB;AAAA,QAAV/B,EAAU,UAAVA,EAAU;AAAA,QAANqC,GAAM,UAANA,GAAM;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAElDhC,iBAFkD;;AAAA,oBAGjDA,MAAMQ,kBAAkB,EAACU,YAAD,EAAQQ,kBAAR,EAAlB,CAH2C;AAAA;AAAA;AAAA;;AAAA,+CAI7C,0BAAiB1B,GAAjB,CAJ6C;;AAAA;AAAA,oBAMjDA,MAAMiB,gBAAgBC,KAAhB,CAN2C;AAAA;AAAA;AAAA;;AAAA,+CAO7C,0BAAiBlB,GAAjB,CAP6C;;AAAA;AAAA;AAAA,qBASrCsB,gBAAgBJ,KAAhB,EAAuBvB,EAAvB,CATqC;;AAAA;AAAA,oBASjDK,GATiD;AAAA;AAAA;AAAA;;AAAA,+CAU7C,0BAAiBA,GAAjB,CAV6C;;AAAA;AAahD0C,wBAbgD,GAanC,uBAbmC;AAAA,+CAe/C,IAAI9C,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9B,uBAAOF,GAAGG,UAAH,CAAcR,qBAAd,EACJ4H,aADI,CAEH,EAACnE,KAAKL,UAAN,EAFG,EAGH,EAHG,EAIF;AACCyE,wBAAM;AACJjC,8BAAU,IADN;AAEJC,8BAAU,IAFN;AAGJC,+BAAW,EAHP;AAIJC,uCAAmB,EAJf;AAKJC,oCAAgB,IALZ;AAMJC,4BAAQ,EANJ;AAOJZ,2BAAO,IAPH;AAQJa,iCAAa,EART;AASJC,gCAAY,EATR;AAUJC,oCAAgB,IAVZ;AAWJC,oCAAgB,IAXZ;AAYJpB,6BAAS,IAZL;AAaJC,4BAAQ;AAbJ;AADP,iBAJE,EAqBF;AACC4C,0BAAQ,IADT;AAECC,uBAAK;AAFN,iBArBE,EAyBH,UAACrH,GAAD,UAA2B;AAAA,sBAAbkD,OAAa,UAApBoE,KAAoB;;AACzB,yBAAOzH,QAAQqD,OAAR,CAAP;AACD,iBA3BE,CAAP;AA6BD,eA9BM,EAgCN3B,IAhCM,CAgCD,YAAM;AACV,uBAAO,IAAI3B,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9B,yBAAOF,GAAGG,UAAH,CAAcP,kBAAd,EACJ2H,aADI,CAEH,EAACnE,KAAK,uBAAN,EAFG,EAGH,EAHG,EAIF;AACCoE,0BAAM;AACJjG,kCADI;AAEJQ,gCAAUD,aAAaC,QAAb,CAFN;AAGJgB;AAHI;AADP,mBAJE,EAWF;AACC0E,4BAAQ,IADT;AAECC,yBAAK;AAFN,mBAXE,EAeH,UAACrH,GAAD,UAAyB;AAAA,wBAAViC,IAAU,UAAjBqF,KAAiB;;AACvBtF,wBAAIuF,KAAJ,CAAUtF,IAAV,EAAgB,YAAM;AACpB,oDACE,YADF,EAEEf,KAFF,EAGEQ,QAHF;AAKA,6BAAO7B,QAAQoC,IAAR,CAAP;AACD,qBAPD;AAQD,mBAxBE,CAAP;AA0BD,iBA3BM,CAAP;AA4BD,eA7DM,CAf+C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6EvD;AAjGqD,CAA7B,CAA3B;;AAoGA,IAAMuF,qBAAqB,gDAA6B;AACtD5D,QAAM,YADgD;AAEtDkD,eAAa;AACXxE,QAAI,EAACe,MAAM,+CAAP,EADO;AAEXnC,WAAO,EAACmC,MAAM,mDAAP,EAFI;AAGX3B,cAAU,EAAC2B,MAAM,mDAAP;AAHC,GAFyC;AAOtD0D,gBAAc;AACZH,YAAQ;AACNvD,YAAME,UADA;AAEN1D,aAFM,qBAEI;AACR,eAAOgD,WAAP;AACD;AAJK,KADI;AAOZmE,WAAO;AACL3D,YAAM2C,QADD;AAELnG,aAFK,mBAEG8G,IAFH,EAES;AACZ,eAAOA,IAAP;AACD;AAJI;AAPK,GAPwC;AAqBhDM,qBArBgD,+CAqBoB;AAAA;;AAAA,QAA3C9E,YAA2C,UAA/CG,EAA+C;AAAA,QAA7BpB,KAA6B,UAA7BA,KAA6B;AAAA,QAAtBQ,QAAsB,UAAtBA,QAAsB;AAAA,QAAV/B,EAAU,UAAVA,EAAU;AAAA,QAANqC,GAAM,UAANA,GAAM;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEpEhC,iBAFoE;;AAAA,oBAGnEA,MAAMQ,kBAAkB,EAACU,YAAD,EAAQQ,kBAAR,EAAlB,CAH6D;AAAA;AAAA;AAAA;;AAAA,gDAI/D,0BAAiB1B,GAAjB,CAJ+D;;AAAA;AAAA,oBAMnEA,MAAM+B,gBAAgBC,GAAhB,CAN6D;AAAA;AAAA;AAAA;;AAAA,gDAO/D,0BAAiBhC,GAAjB,CAP+D;;AAAA;AAAA,oBASnEA,MAAMkC,eAAeC,YAAf,EAA6BH,IAAIC,IAAJ,CAASc,GAAtC,CAT6D;AAAA;AAAA;AAAA;;AAAA,gDAU/D,0BAAiB/C,GAAjB,CAV+D;;AAAA;AAAA,oBAYnEA,MAAMiB,gBAAgBC,KAAhB,CAZ6D;AAAA;AAAA;AAAA;;AAAA,gDAa/D,0BAAiBlB,GAAjB,CAb+D;;AAAA;AAAA,6BAepEkB,UAAUc,IAAIC,IAAJ,CAASf,KAfiD;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAgBvDI,gBAAgBJ,KAAhB,EAAuBvB,EAAvB,CAhBuD;;AAAA;AAAA,6BAgBnEK,GAhBmE;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,gDAiB/D,0BAAiBA,GAAjB,CAjB+D;;AAAA;AAAA,+BAoB9C,gCAAamC,YAAb,CApB8C,EAoB7DE,WApB6D,kBAoBjEC,EApBiE;AAAA,gDAsBjE,IAAI1C,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9B,uBAAOF,GAAGG,UAAH,CAAcP,kBAAd,EACJ2H,aADI,CAEH,EAACnE,KAAK,sBAAaV,WAAb,CAAN,EAFG,EAGH,EAHG,EAIF;AACC8E,wBAAM;AACJjG,gCADI;AAEJQ,8BAAUD,aAAaC,QAAb;AAFN;AADP,iBAJE,EAUF;AACC2F,uBAAK;AADN,iBAVE,EAaH,UAACrH,GAAD,UAAwB;AAAA,sBAAViC,IAAU,UAAjBqF,KAAiB;;AACtBtF,sBAAIuF,KAAJ,CAAUtF,IAAV,EAAgB,YAAM;AACpB,kDACE,YADF,EAEEf,KAFF,EAGEQ,QAHF;AAKA,2BAAO7B,QAAQoC,IAAR,CAAP;AACD,mBAPD;AAQD,iBAtBE,CAAP;AAwBD,eAzBM,CAtBiE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgDzE;AArEqD,CAA7B,CAA3B;;AAwEA,IAAMwF,qBAAqB,gDAA6B;AACtD7D,QAAM,YADgD;AAEtDkD,eAAa;AACXxE,QAAI,EAACe,MAAM,+CAAP;AADO,GAFyC;AAKtD0D,gBAAc;AACZH,YAAQ;AACNvD,YAAME,UADA;AAEN1D,aAFM,qBAEI;AACR,eAAOgD,WAAP;AACD;AAJK,KADI;AAOZmE,WAAO;AACL3D,YAAM2C,QADD;AAELnG,aAFK,qBAEK;AACR,eAAO,EAAP;AACD;AAJI;AAPK,GALwC;AAmBtDoH,qBAnBsD,+CAmBH;AAAA,QAA1B9E,YAA0B,UAA9BG,EAA8B;AAAA,QAAV3C,EAAU,UAAVA,EAAU;AAAA,QAANqC,GAAM,UAANA,GAAM;;;AAEjD,QAAIhC,YAAJ;AACA,QAAKA,MAAM+B,gBAAgBC,GAAhB,CAAX,EAAkC;AAChC,aAAO,0BAAiBhC,GAAjB,CAAP;AACD;AACD,QAAKA,MAAMkC,eAAeC,YAAf,EAA6BH,IAAIC,IAAJ,CAASc,GAAtC,CAAX,EAAwD;AACtD,aAAO,0BAAiB/C,GAAjB,CAAP;AACD;;AARgD,yBAUvB,gCAAamC,YAAb,CAVuB;AAAA,QAUtCE,WAVsC,kBAU1CC,EAV0C;;AAYjD,WAAO,IAAI1C,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9B,aAAOF,GAAGG,UAAH,CAAcR,qBAAd,EACJ4H,aADI,CAEH,EAACnE,KAAK,sBAAaf,IAAIC,IAAJ,CAASS,UAAtB,CAAN,EAFG,EAGH,EAHG,EAIH,EAJG,EAKH,EAACgF,QAAQ,IAAT,EALG,EAMH,YAAM;AACJ,eAAO7H,QAAQ,IAAR,CAAP;AACD,OARE,CAAP;AAUD,KAXM,EAYN0B,IAZM,CAYD,YAAM;AACV,aAAO,IAAI3B,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9B,eAAOF,GAAGG,UAAH,CAAcP,kBAAd,EACJ2H,aADI,CAEH,EAACnE,KAAK,sBAAaV,WAAb,CAAN,EAFG,EAGH,EAHG,EAIH,EAJG,EAKH,EAACqF,QAAQ,IAAT,EALG,EAMH,UAAC1H,GAAD,UAAwB;AAAA,cAAViC,IAAU,UAAjBqF,KAAiB;;AACtB,wCACE,YADF,EAEErF,KAAKf,KAFP,EAGEyG,SAHF;AAKA3F,cAAI4F,MAAJ;AACA,iBAAO/H,QAAQoC,IAAR,CAAP;AACD,SAdE,CAAP;AAgBD,OAjBM,CAAP;AAkBD,KA/BM,CAAP;AAgCD;AA/DqD,CAA7B,CAA3B;;AAkEA,IAAM4F,qBAAqB,gDAA6B;AACtDjE,QAAM,YADgD;AAEtDkD,eAAa;AACX5F,WAAO,EAACmC,MAAM,mDAAP,EADI;AAEX3B,cAAU,EAAC2B,MAAM,mDAAP;AAFC,GAFyC;AAMtD0D,gBAAc;AACZH,YAAQ;AACNvD,YAAME,UADA;AAEN1D,aAFM,qBAEI;AACR,eAAOgD,WAAP;AACD;AAJK,KADI;AAOZmE,WAAO;AACL3D,YAAM2C,QADD;AAELnG,aAFK,mBAEG8G,IAFH,EAES;AACZ,eAAOA,IAAP;AACD;AAJI;AAPK,GANwC;AAoBhDM,qBApBgD,+CAoBF;AAAA;;AAAA,QAAzB/F,KAAyB,UAAzBA,KAAyB;AAAA,QAAlBQ,QAAkB,UAAlBA,QAAkB;AAAA,QAANM,GAAM,UAANA,GAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAE9ChC,iBAF8C;;AAAA,oBAG7CA,MAAMQ,kBAAkB,EAACU,YAAD,EAAQQ,kBAAR,EAAlB,CAHuC;AAAA;AAAA;AAAA;;AAAA,gDAIzC,0BAAiB1B,GAAjB,CAJyC;;AAAA;AAAA,gDAO3C,IAAIJ,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9B,uBAAO,mBAASiI,YAAT,CAAsB,OAAtB,EAA+B,UAAC9H,GAAD,EAAMiC,IAAN,EAAY8F,IAAZ,EAAqB;AACzD,sBAAIA,IAAJ,EAAU;AACR,2BAAOlI,QAAQ,0BAAiBkI,IAAjB,CAAR,CAAP;AACD;;AAED,yBAAO/F,IAAIuF,KAAJ,CAAUtF,IAAV,EAAgB,YAAM;AAC3B,2BAAOpC,QAAQoC,IAAR,CAAP;AACD,mBAFM,CAAP;AAGD,iBARM,6BASFD,GATE;AAULgG,wBAAM;AACJ9G,gCADI;AAEJQ;AAFI;AAVD,mBAAP;AAeD,eAhBM,CAP2C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBnD;AA5CqD,CAA7B,CAA3B;;AA+CA,IAAMuG,sBAAsB,gDAA6B;AACvDrE,QAAM,aADiD;AAEvDkD,eAAa,EAF0C;AAGvDC,gBAAc;AACZH,YAAQ;AACNvD,YAAME,UADA;AAEN1D,aAFM,qBAEI;AACR,eAAOgD,WAAP;AACD;AAJK;AADI,GAHyC;AAWvDoE,qBAXuD,+BAWnCiB,CAXmC,UAWzB;AAAA,QAANlG,GAAM,UAANA,GAAM;;AAC5BA,QAAI4F,MAAJ;AACA,WAAO,EAAP;AACD;AAdsD,CAA7B,CAA5B;;AAiBA,IAAMO,4BAA4B,gDAA6B;AAC7DvE,QAAM,mBADuD;AAE7DkD,eAAa;AACX5F,WAAO,EAACmC,MAAM,mDAAP;AADI,GAFgD;AAK7D0D,gBAAc;AACZH,YAAQ;AACNvD,YAAME,UADA;AAEN1D,aAFM,qBAEI;AACR,eAAOgD,WAAP;AACD;AAJK,KADI;AAOZmE,WAAO;AACL3D,YAAM2C,QADD;AAELnG,aAFK,mBAEG8G,IAFH,EAES;AACZ,eAAOA,IAAP;AACD;AAJI;AAPK,GAL+C;AAmBvDM,qBAnBuD,+CAmBpB;AAAA;;AAAA,QAAd/F,KAAc,UAAdA,KAAc;AAAA,QAALvB,EAAK,UAALA,EAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEnCK,iBAFmC;;AAAA,oBAGlCA,MAAMQ,kBAAkB,EAACU,YAAD,EAAlB,CAH4B;AAAA;AAAA;AAAA;;AAAA,gDAI9B,0BAAiBlB,GAAjB,CAJ8B;;AAAA;AAAA;AAAA,qBAOtBwB,oBAAoBN,KAApB,EAA2BvB,EAA3B,CAPsB;;AAAA;AAAA,oBAOlCK,GAPkC;AAAA;AAAA;AAAA;;AAAA,gDAQ9B,0BAAiBA,GAAjB,CAR8B;;AAAA;AAWjC0B,sBAXiC,GAWtBI,kBAXsB;AAAA,gDAahC,IAAIlC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9B,uBAAOF,GAAGG,UAAH,CAAcP,kBAAd,EACJ2H,aADI,CAEH,EAAChG,YAAD,EAFG,EAGH,EAHG,EAIF;AACCiG,wBAAM;AACJzF,8BAAUD,aAAaC,QAAb;AADN;AADP,iBAJE,EASF;AACC2F,uBAAK;AADN,iBATE,EAYH,UAACrH,GAAD,UAAwB;AAAA,sBAAViC,IAAU,UAAjBqF,KAAiB;;AACtB,gDACE,mBADF,EAEErF,KAAKf,KAFP,EAGEQ,QAHF;AAKA,yBAAO7B,QAAQoC,IAAR,CAAP;AACD,iBAnBE,CAAP;AAqBD,eAtBM,CAbgC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoCxC;AAvD4D,CAA7B,CAAlC;;AA0DA,IAAMmG,wBAAwB,gDAA6B;AACzDxE,QAAM,eADmD;AAEzDkD,eAAa;AACXxE,QAAI,EAACe,MAAM,+CAAP,EADO;AAEX6B,cAAU,EAAC7B,MAAM,mDAAP,EAFC;AAGXsB,WAAO,EAACtB,MAAM,mDAAP,EAHI;AAIXqC,oBAAgB,EAACrC,MAAM,mDAAP,EAJL;AAKXsC,oBAAgB,EAACtC,MAAM,mDAAP,EALL;AAMXkB,aAAS,EAAClB,MAAM,mDAAP,EANE;AAOXmB,YAAQ,EAACnB,MAAM,mDAAP;AAPG,GAF4C;AAWzD0D,gBAAc;AACZH,YAAQ;AACNvD,YAAME,UADA;AAEN1D,aAFM,qBAEI;AACR,eAAOgD,WAAP;AACD;AAJK,KADI;AAOZmE,WAAO;AACL3D,YAAMG,WADD;AAEL3D,aAFK,mBAEG8G,IAFH,EAES;AACZ,eAAOA,IAAP;AACD;AAJI;AAPK,GAX2C;AAyBzDM,qBAzByD,+CAoCvD;AAAA,QATMxE,eASN,UATEH,EASF;AAAA,QARE4C,QAQF,UAREA,QAQF;AAAA,QAPEP,KAOF,UAPEA,KAOF;AAAA,QANEe,cAMF,UANEA,cAMF;AAAA,QALEC,cAKF,UALEA,cAKF;AAAA,QAJEpB,OAIF,UAJEA,OAIF;AAAA,QAHEC,MAGF,UAHEA,MAGF;AAAA,QADC7E,EACD,UADCA,EACD;AAAA,QADKqC,GACL,UADKA,GACL;;;AAEA,QAAIhC,YAAJ;AACA,QAAKA,MAAMQ,kBAAkB;AAC3B0E,wBAD2B;AAE3BP,kBAF2B;AAG3Be,oCAH2B;AAI3BC,oCAJ2B;AAK3BpB,sBAL2B;AAM3BC;AAN2B,KAAlB,CAAX,EAOK;AACH,aAAO,0BAAiBxE,GAAjB,CAAP;AACD;AACD,QAAKA,MAAM+B,gBAAgBC,GAAhB,CAAX,EAAkC;AAChC,aAAO,0BAAiBhC,GAAjB,CAAP;AACD;AACD,QAAKA,MAAMwC,eAAeC,eAAf,EAAgCT,IAAIC,IAAJ,CAASS,UAAzC,CAAX,EAAkE;AAChE,aAAO,0BAAiB1C,GAAjB,CAAP;AACD;;AAlBD,yBAoB6B,gCAAayC,eAAb,CApB7B;AAAA,QAoBWE,cApBX,kBAoBOL,EApBP;;AAsBA,WAAO,IAAI1C,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9B,aAAOF,GAAGG,UAAH,CAAcR,qBAAd,EACJ4H,aADI,CAEH,EAACnE,KAAK,sBAAaJ,cAAb,CAAN,EAFG,EAGH,EAHG,EAIF;AACCwE,cAAM;AACJjC,4BADI;AAEJP,sBAFI;AAGJe,wCAHI;AAIJC,wCAJI;AAKJpB,0BALI;AAMJC;AANI;AADP,OAJE,EAcF;AACC6C,aAAK;AADN,OAdE,EAiBH,UAACrH,GAAD,UAA2B;AAAA,YAAbkD,OAAa,UAApBoE,KAAoB;;AACzB,eAAOzH,QAAQqD,OAAR,CAAP;AACD,OAnBE,CAAP;AAqBD,KAtBM,CAAP;AAuBD;AAjFwD,CAA7B,CAA9B;;AAoFA,IAAMmF,kCAAkC,gDAA6B;AACnEzE,QAAM,yBAD6D;AAEnEkD,eAAa;AACXxE,QAAI,EAACe,MAAM,+CAAP,EADO;AAEXgB,aAAS,EAAChB,MAAM,mDAAP,EAFE;AAGXsB,WAAO,EAACtB,MAAM,mDAAP,EAHI;AAIXiB,iBAAa,EAACjB,MAAM,mDAAP,EAJF;AAKXkB,aAAS,EAAClB,MAAM,mDAAP,EALE;AAMXmB,YAAQ,EAACnB,MAAM,mDAAP,EANG;AAOXqB,WAAO,EAACrB,MAAM,mDAAP,EAPI;AAQXuB,WAAO,EAACvB,MAAM,mDAAP;AARI,GAFsD;AAYnE0D,gBAAc;AACZH,YAAQ;AACNvD,YAAME,UADA;AAEN1D,aAFM,qBAEI;AACR,eAAOgD,WAAP;AACD;AAJK,KADI;AAOZmE,WAAO;AACL3D,YAAMG,WADD;AAEL3D,aAFK,mBAEG8G,IAFH,EAES;AACZ,eAAOA,IAAP;AACD;AAJI;AAPK,GAZqD;AA0BnEM,qBA1BmE,+CA6BjE;AAAA,QAFKxE,eAEL,UAFCH,EAED;AAAA,QAFsB+B,OAEtB,UAFsBA,OAEtB;AAAA,QAF+BM,KAE/B,UAF+BA,KAE/B;AAAA,QAFsCL,WAEtC,UAFsCA,WAEtC;AAAA,QAFmDC,OAEnD,UAFmDA,OAEnD;AAAA,QAF4DC,MAE5D,UAF4DA,MAE5D;AAAA,QAFoEE,KAEpE,UAFoEA,KAEpE;AAAA,QAF2EE,KAE3E,UAF2EA,KAE3E;AAAA,QADCjF,EACD,UADCA,EACD;AAAA,QADKqC,GACL,UADKA,GACL;;;AAEA,QAAIhC,YAAJ;AACA,QAAKA,MAAMQ,kBAAkB;AAC3B6D,sBAD2B;AAE3BM,kBAF2B;AAG3BJ,sBAH2B;AAI3BC,oBAJ2B;AAK3BE,kBAL2B;AAM3BE,kBAN2B;AAO3BN;AAP2B,KAAlB,CAAX,EAQK;AACH,aAAO,0BAAiBtE,GAAjB,CAAP;AACD;AACD,QAAKA,MAAM+B,gBAAgBC,GAAhB,CAAX,EAAkC;AAChC,aAAO,0BAAiBhC,GAAjB,CAAP;AACD;AACD,QAAKA,MAAMwC,eAAeC,eAAf,EAAgCT,IAAIC,IAAJ,CAASS,UAAzC,CAAX,EAAkE;AAChE,aAAO,0BAAiB1C,GAAjB,CAAP;AACD;;AAnBD,yBAqB6B,gCAAayC,eAAb,CArB7B;AAAA,QAqBWE,cArBX,kBAqBOL,EArBP;;AAuBA,WAAO,IAAI1C,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9B,aAAOF,GAAGG,UAAH,CAAcR,qBAAd,EACJ4H,aADI,CAEH,EAACnE,KAAK,sBAAaJ,cAAb,CAAN,EAFG,EAGH,EAHG,EAIF;AACC2F,eAAO;AACL9C,uBAAa;AACX+C,mBAAO,CAAC;AACNxF,mBAAK,uBADC;AAENsB,8BAFM;AAGNM,0BAHM;AAINL,sCAJM;AAKNC,8BALM;AAMNC,4BANM;AAONE,0BAPM;AAQNE;AARM,aAAD,CADI;AAWX4D,uBAAW;AAXA;AADR;AADR,OAJE,EAqBF;AACCnB,aAAK;AADN,OArBE,EAwBH,UAACrH,GAAD,UAA2B;AAAA,YAAbkD,OAAa,UAApBoE,KAAoB;;AACzB,eAAOzH,QAAQqD,OAAR,CAAP;AACD,OA1BE,CAAP;AA4BD,KA7BM,CAAP;AA8BD;AAlFkE,CAA7B,CAAxC;;AAqFA,IAAMuF,kCAAkC,gDAA6B;AACnE7E,QAAM,yBAD6D;AAEnEkD,eAAa;AACXxE,QAAI,EAACe,MAAM,+CAAP,EADO;AAEXqF,kBAAc,EAACrF,MAAM,+CAAP,EAFH;AAGXgB,aAAS,EAAChB,MAAM,mDAAP,EAHE;AAIXsB,WAAO,EAACtB,MAAM,mDAAP,EAJI;AAKXiB,iBAAa,EAACjB,MAAM,mDAAP,EALF;AAMXkB,aAAS,EAAClB,MAAM,mDAAP,EANE;AAOXmB,YAAQ,EAACnB,MAAM,mDAAP,EAPG;AAQXqB,WAAO,EAACrB,MAAM,mDAAP,EARI;AASXuB,WAAO,EAACvB,MAAM,mDAAP;AATI,GAFsD;AAanE0D,gBAAc;AACZH,YAAQ;AACNvD,YAAME,UADA;AAEN1D,aAFM,qBAEI;AACR,eAAOgD,WAAP;AACD;AAJK,KADI;AAOZmE,WAAO;AACL3D,YAAMG,WADD;AAEL3D,aAFK,mBAEG8G,IAFH,EAES;AACZ,eAAOA,IAAP;AACD;AAJI;AAPK,GAbqD;AA2BnEM,qBA3BmE,+CAwCjE;AAAA,QAXMxE,eAWN,UAXEH,EAWF;AAAA,QAVgBqG,kBAUhB,UAVED,YAUF;AAAA,QATErE,OASF,UATEA,OASF;AAAA,QAREM,KAQF,UAREA,KAQF;AAAA,QAPEL,WAOF,UAPEA,WAOF;AAAA,QANEC,OAMF,UANEA,OAMF;AAAA,QALEC,MAKF,UALEA,MAKF;AAAA,QAJEE,KAIF,UAJEA,KAIF;AAAA,QAHEE,KAGF,UAHEA,KAGF;AAAA,QADCjF,EACD,UADCA,EACD;AAAA,QADKqC,GACL,UADKA,GACL;;;AAEA,QAAIhC,YAAJ;AACA,QAAKA,MAAMQ,kBAAkB;AAC3B6D,sBAD2B;AAE3BM,kBAF2B;AAG3BJ,sBAH2B;AAI3BC,oBAJ2B;AAK3BE,kBAL2B;AAM3BE,kBAN2B;AAO3BN;AAP2B,KAAlB,CAAX,EAQK;AACH,aAAO,0BAAiBtE,GAAjB,CAAP;AACD;AACD,QAAKA,MAAM+B,gBAAgBC,GAAhB,CAAX,EAAkC;AAChC,aAAO,0BAAiBhC,GAAjB,CAAP;AACD;AACD,QAAKA,MAAMwC,eAAeC,eAAf,EAAgCT,IAAIC,IAAJ,CAASS,UAAzC,CAAX,EAAkE;AAChE,aAAO,0BAAiB1C,GAAjB,CAAP;AACD;;AAnBD,yBAqB6B,gCAAayC,eAAb,CArB7B;AAAA,QAqBWE,cArBX,kBAqBOL,EArBP;;AAAA,0BAsBgC,gCAAaqG,kBAAb,CAtBhC;AAAA,QAsBWvE,iBAtBX,mBAsBO9B,EAtBP;;AAwBA,WAAO,IAAI1C,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9B,aAAOF,GAAGG,UAAH,CAAcR,qBAAd,EACJ4H,aADI,CAEF;AACCnE,aAAK,sBAAaJ,cAAb,CADN;AAEC,2BAAmB,sBAAayB,iBAAb;AAFpB,OAFE,EAMH,EANG,EAOF;AACC+C,cAAM;AACJ,mCAAyB9C,OADrB;AAEJ,iCAAuBM,KAFnB;AAGJ,mCAAyBJ,OAHrB;AAIJ,kCAAwBC,MAJpB;AAKJ,iCAAuBE,KALnB;AAMJ,iCAAuBE,KANnB;AAOJ,uCAA6BN;AAPzB;AADP,OAPE,EAkBF;AACC+C,aAAK;AADN,OAlBE,EAqBH,UAACrH,GAAD,UAA2B;AAAA,YAAbkD,OAAa,UAApBoE,KAAoB;;AACzB,eAAOzH,QAAQqD,OAAR,CAAP;AACD,OAvBE,CAAP;AAyBD,KA1BM,CAAP;AA2BD;AA3FkE,CAA7B,CAAxC;;AA8FA,IAAM0F,kCAAkC,gDAA6B;AACnEhF,QAAM,yBAD6D;AAEnEkD,eAAa;AACXxE,QAAI,EAACe,MAAM,+CAAP,EADO;AAEXqF,kBAAc,EAACrF,MAAM,+CAAP;AAFH,GAFsD;AAMnE0D,gBAAc;AACZH,YAAQ;AACNvD,YAAME,UADA;AAEN1D,aAFM,qBAEI;AACR,eAAOgD,WAAP;AACD;AAJK,KADI;AAOZmE,WAAO;AACL3D,YAAMG,WADD;AAEL3D,aAFK,mBAEG8G,IAFH,EAES;AACZ,eAAOA,IAAP;AACD;AAJI;AAPK,GANqD;AAoBnEM,qBApBmE,+CAuBjE;AAAA,QAFKxE,eAEL,UAFCH,EAED;AAAA,QAFoCqG,kBAEpC,UAFsBD,YAEtB;AAAA,QADC/I,EACD,UADCA,EACD;AAAA,QADKqC,GACL,UADKA,GACL;;;AAEA,QAAIhC,YAAJ;AACA,QAAKA,MAAM+B,gBAAgBC,GAAhB,CAAX,EAAkC;AAChC,aAAO,0BAAiBhC,GAAjB,CAAP;AACD;AACD,QAAKA,MAAMwC,eAAeC,eAAf,EAAgCT,IAAIC,IAAJ,CAASS,UAAzC,CAAX,EAAkE;AAChE,aAAO,0BAAiB1C,GAAjB,CAAP;AACD;;AARD,0BAU6B,gCAAayC,eAAb,CAV7B;AAAA,QAUWE,cAVX,mBAUOL,EAVP;;AAAA,0BAWgC,gCAAaqG,kBAAb,CAXhC;AAAA,QAWWvE,iBAXX,mBAWO9B,EAXP;;AAaA,WAAO,IAAI1C,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9B,aAAOF,GAAGG,UAAH,CAAcR,qBAAd,EACJ4H,aADI,CAEH,EAACnE,KAAK,sBAAaJ,cAAb,CAAN,EAFG,EAGH,EAHG,EAIF;AACCkG,eAAO;AACLrD,uBAAa;AACXzC,iBAAK,sBAAaqB,iBAAb;AADM;AADR;AADR,OAJE,EAWF;AACCiD,aAAK;AADN,OAXE,EAcH,UAACrH,GAAD,UAA2B;AAAA,YAAbkD,OAAa,UAApBoE,KAAoB;;AACzB,eAAOzH,QAAQqD,OAAR,CAAP;AACD,OAhBE,CAAP;AAkBD,KAnBM,CAAP;AAoBD;AAxDkE,CAA7B,CAAxC;;AA2DA,IAAM4F,iCAAiC,gDAA6B;AAClElF,QAAM,wBAD4D;AAElEkD,eAAa;AACXxE,QAAI,EAACe,MAAM,mDAAP,EADO;AAEX2B,UAAM,EAAC3B,MAAM,mDAAP,EAFK;AAGX4B,YAAQ,EAAC5B,MAAM,mDAAP,EAHG;AAIXsB,WAAO,EAACtB,MAAM,mDAAP;AAJI,GAFqD;AAQlE0D,gBAAc;AACZH,YAAQ;AACNvD,YAAME,UADA;AAEN1D,aAFM,qBAEI;AACRgD;AACD;AAJK,KADI;AAOZmE,WAAO;AACL3D,YAAMG,WADD;AAEL3D,aAFK,mBAEG8G,IAFH,EAES;AACZ,eAAOA,IAAP;AACD;AAJI;AAPK,GARoD;AAsBlEM,qBAtBkE,+CAsBS;AAAA,QAAlDxE,eAAkD,UAAtDH,EAAsD;AAAA,QAAjC0C,IAAiC,UAAjCA,IAAiC;AAAA,QAA3BC,MAA2B,UAA3BA,MAA2B;AAAA,QAAnBN,KAAmB,UAAnBA,KAAmB;AAAA,QAAVhF,EAAU,UAAVA,EAAU;AAAA,QAANqC,GAAM,UAANA,GAAM;;;AAEzE,QAAIhC,YAAJ;AACA,QAAKA,MAAMQ,kBAAkB;AAC3BwE,gBAD2B;AAE3BC,oBAF2B;AAG3BN;AAH2B,KAAlB,CAAX,EAIK;AACH,aAAO,0BAAiB3E,GAAjB,CAAP;AACD;AACD,QAAKA,MAAM+B,gBAAgBC,GAAhB,CAAX,EAAkC;AAChC,aAAO,0BAAiBhC,GAAjB,CAAP;AACD;AACD,QAAKA,MAAMwC,eAAeC,eAAf,EAAgCT,IAAIC,IAAJ,CAASS,UAAzC,CAAX,EAAkE;AAChE,aAAO,0BAAiB1C,GAAjB,CAAP;AACD;;AAfwE,0BAiB5C,gCAAayC,eAAb,CAjB4C;AAAA,QAiB9DE,cAjB8D,mBAiBlEL,EAjBkE;;AAmBzE,WAAO,IAAI1C,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9B,aAAOF,GAAGG,UAAH,CAAcR,qBAAd,EACJ4H,aADI,CAEH,EAACnE,KAAK,sBAAaJ,cAAb,CAAN,EAFG,EAGH,EAHG,EAIF;AACC2F,eAAO;AACL7C,sBAAY;AACV8C,mBAAO,CAAC;AACNxF,mBAAK,uBADC;AAENiC,wBAFM;AAGNC,4BAHM;AAINN;AAJM,aAAD,CADG;AAOV6D,uBAAW;AAPD;AADP;AADR,OAJE,EAiBF;AACCnB,aAAK;AADN,OAjBE,EAoBH,UAACrH,GAAD,UAA2B;AAAA,YAAbkD,OAAa,UAApBoE,KAAoB;;AACzB,eAAOzH,QAAQqD,OAAR,CAAP;AACD,OAtBE,CAAP;AAwBD,KAzBM,CAAP;AA0BD;AAnEiE,CAA7B,CAAvC;;AAsEA,IAAM6F,iCAAiC,gDAA6B;AAClEnF,QAAM,wBAD4D;AAElEkD,eAAa;AACXxE,QAAI,EAACe,MAAM,+CAAP,EADO;AAEX2F,iBAAa,EAAC3F,MAAM,+CAAP,EAFF;AAGX2B,UAAM,EAAC3B,MAAM,mDAAP,EAHK;AAIX4B,YAAQ,EAAC5B,MAAM,mDAAP,EAJG;AAKXsB,WAAO,EAACtB,MAAM,mDAAP;AALI,GAFqD;AASlE0D,gBAAc;AACZH,YAAQ;AACNvD,YAAME,UADA;AAEN1D,aAFM,qBAEI;AACR,eAAOgD,WAAP;AACD;AAJK,KADI;AAOZmE,WAAO;AACL3D,YAAMG,WADD;AAEL3D,aAFK,mBAEG8G,IAFH,EAES;AACZ,eAAOA,IAAP;AACD;AAJI;AAPK,GAToD;AAuBlEM,qBAvBkE,+CA0BhE;AAAA,QAFKxE,eAEL,UAFCH,EAED;AAAA,QAFmC2G,iBAEnC,UAFsBD,WAEtB;AAAA,QAFsDhE,IAEtD,UAFsDA,IAEtD;AAAA,QAF4DC,MAE5D,UAF4DA,MAE5D;AAAA,QAFoEN,KAEpE,UAFoEA,KAEpE;AAAA,QADChF,EACD,UADCA,EACD;AAAA,QADKqC,GACL,UADKA,GACL;;;AAEA,QAAIhC,YAAJ;AACA,QAAKA,MAAMQ,kBAAkB;AAC3BwE,gBAD2B;AAE3BC,oBAF2B;AAG3BN;AAH2B,KAAlB,CAAX,EAIK;AACH,aAAO,0BAAiB3E,GAAjB,CAAP;AACD;AACD,QAAKA,MAAM+B,gBAAgBC,GAAhB,CAAX,EAAkC;AAChC,aAAO,0BAAiBhC,GAAjB,CAAP;AACD;AACD,QAAKA,MAAMwC,eAAeC,eAAf,EAAgCT,IAAIC,IAAJ,CAASS,UAAzC,CAAX,EAAkE;AAChE,aAAO,0BAAiB1C,GAAjB,CAAP;AACD;;AAfD,0BAiB6B,gCAAayC,eAAb,CAjB7B;AAAA,QAiBWE,cAjBX,mBAiBOL,EAjBP;;AAAA,0BAkB+B,gCAAa2G,iBAAb,CAlB/B;AAAA,QAkBWnE,gBAlBX,mBAkBOxC,EAlBP;;AAoBA,WAAO,IAAI1C,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9B,aAAOF,GAAGG,UAAH,CAAcR,qBAAd,EACJ4H,aADI,CAEF;AACCnE,aAAK,sBAAaJ,cAAb,CADN;AAEC,0BAAkB,sBAAamC,gBAAb;AAFnB,OAFE,EAMH,EANG,EAOF;AACCqC,cAAM;AACJ,+BAAqBnC,IADjB;AAEJ,iCAAuBC,MAFnB;AAGJ,gCAAsBN;AAHlB;AADP,OAPE,EAcF;AACC0C,aAAK;AADN,OAdE,EAiBH,UAACrH,GAAD,UAA2B;AAAA,YAAbkD,OAAa,UAApBoE,KAAoB;;AACzB,eAAOzH,QAAQqD,OAAR,CAAP;AACD,OAnBE,CAAP;AAqBD,KAtBM,CAAP;AAuBD;AArEiE,CAA7B,CAAvC;;AAwEA,IAAMgG,iCAAiC,gDAA6B;AAClEtF,QAAM,wBAD4D;AAElEkD,eAAa;AACXxE,QAAI,EAACe,MAAM,+CAAP,EADO;AAEX2F,iBAAa,EAAC3F,MAAM,+CAAP;AAFF,GAFqD;AAMlE0D,gBAAc;AACZH,YAAQ;AACNvD,YAAME,UADA;AAEN1D,aAFM,qBAEI;AACR,eAAOgD,WAAP;AACD;AAJK,KADI;AAOZmE,WAAO;AACL3D,YAAMG,WADD;AAEL3D,aAFK,mBAEG8G,IAFH,EAES;AACZ,eAAOA,IAAP;AACD;AAJI;AAPK,GANoD;AAoBlEM,qBApBkE,+CAuBhE;AAAA,QAFKxE,eAEL,UAFCH,EAED;AAAA,QAFmC2G,iBAEnC,UAFsBD,WAEtB;AAAA,QADCrJ,EACD,UADCA,EACD;AAAA,QADKqC,GACL,UADKA,GACL;;;AAEA,QAAIhC,YAAJ;AACA,QAAKA,MAAM+B,gBAAgBC,GAAhB,CAAX,EAAkC;AAChC,aAAO,0BAAiBhC,GAAjB,CAAP;AACD;AACD,QAAKA,MAAMwC,eAAeC,eAAf,EAAgCT,IAAIC,IAAJ,CAASS,UAAzC,CAAX,EAAkE;AAChE,aAAO,0BAAiB1C,GAAjB,CAAP;AACD;;AARD,0BAU6B,gCAAayC,eAAb,CAV7B;AAAA,QAUWE,cAVX,mBAUOL,EAVP;;AAAA,0BAW+B,gCAAa2G,iBAAb,CAX/B;AAAA,QAWWnE,gBAXX,mBAWOxC,EAXP;;AAaA,WAAO,IAAI1C,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9B,aAAOF,GAAGG,UAAH,CAAcR,qBAAd,EACJ4H,aADI,CAEH,EAACnE,KAAK,sBAAaJ,cAAb,CAAN,EAFG,EAGH,EAHG,EAIF;AACCkG,eAAO;AACLpD,sBAAY;AACV1C,iBAAK,sBAAa+B,gBAAb;AADK;AADP;AADR,OAJE,EAWF;AACCuC,aAAK;AADN,OAXE,EAcH,UAACrH,GAAD,UAA2B;AAAA,YAAbkD,OAAa,UAApBoE,KAAoB;;AACzB,eAAOzH,QAAQqD,OAAR,CAAP;AACD,OAhBE,CAAP;AAkBD,KAnBM,CAAP;AAoBD;AAxDiE,CAA7B,CAAvC;;AA2DA,IAAMiG,6BAA6B,gDAA6B;AAC9DvF,QAAM,oBADwD;AAE9DkD,eAAa;AACXxE,QAAI,EAACe,MAAM,+CAAP,EADO;AAEXO,UAAM,EAACP,MAAM,+CAAP;AAFK,GAFiD;AAM9D0D,gBAAc;AACZH,YAAQ;AACNvD,YAAME,UADA;AAEN1D,aAFM,qBAEI;AACR,eAAOgD,WAAP;AACD;AAJK,KADI;AAOZmE,WAAO;AACL3D,YAAMG,WADD;AAEL3D,aAFK,mBAEG8G,IAFH,EAES;AACZ,eAAOA,IAAP;AACD;AAJI;AAPK,GANgD;AAoB9DM,qBApB8D,+CAoBF;AAAA,QAAnCxE,eAAmC,UAAvCH,EAAuC;AAAA,QAAlBsB,IAAkB,UAAlBA,IAAkB;AAAA,QAAVjE,EAAU,UAAVA,EAAU;AAAA,QAANqC,GAAM,UAANA,GAAM;;;AAE1D,QAAIhC,YAAJ;AACA,QAAKA,MAAMQ,kBAAkB,EAACoD,UAAD,EAAlB,CAAX,EAAuC;AACrC,aAAO,0BAAiB5D,GAAjB,CAAP;AACD;AACD,QAAKA,MAAM+B,gBAAgBC,GAAhB,CAAX,EAAkC;AAChC,aAAO,0BAAiBhC,GAAjB,CAAP;AACD;AACD,QAAKA,MAAMwC,eAAeC,eAAf,EAAgCT,IAAIC,IAAJ,CAASS,UAAzC,CAAX,EAAkE;AAChE,aAAO,0BAAiB1C,GAAjB,CAAP;AACD;;AAXyD,0BAa7B,gCAAayC,eAAb,CAb6B;AAAA,QAa/CE,cAb+C,mBAanDL,EAbmD;;AAe1D,WAAO,IAAI1C,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9B,aAAOF,GAAGG,UAAH,CAAcR,qBAAd,EACJ4H,aADI,CAEH,EAACnE,KAAK,sBAAaJ,cAAb,CAAN,EAFG,EAGH,EAHG,EAIF;AACC2F,eAAO;AACL/C,kBAAQ;AACNgD,mBAAO,CAAC;AACNxF,mBAAK,uBADC;AAENa;AAFM,aAAD,CADD;AAKN4E,uBAAW;AALL;AADH;AADR,OAJE,EAeF;AACCnB,aAAK;AADN,OAfE,EAkBH,UAACrH,GAAD,UAA2B;AAAA,YAAbkD,OAAa,UAApBoE,KAAoB;;AACzB,eAAOzH,QAAQqD,OAAR,CAAP;AACD,OApBE,CAAP;AAsBD,KAvBM,CAAP;AAwBD;AA3D6D,CAA7B,CAAnC;;AA8DA,IAAMkG,6BAA6B,gDAA6B;AAC9DxF,QAAM,oBADwD;AAE9DkD,eAAa;AACXxE,QAAI,EAACe,MAAM,+CAAP,EADO;AAEXgG,aAAS,EAAChG,MAAM,+CAAP,EAFE;AAGXO,UAAM,EAACP,MAAM,mDAAP;AAHK,GAFiD;AAO9D0D,gBAAc;AACZH,YAAQ;AACNvD,YAAME,UADA;AAEN1D,aAFM,qBAEI;AACR,eAAOgD,WAAP;AACD;AAJK,KADI;AAOZmE,WAAO;AACL3D,YAAMG,WADD;AAEL3D,aAFK,mBAEG8G,IAFH,EAES;AACZ,eAAOA,IAAP;AACD;AAJI;AAPK,GAPgD;AAqB9DM,qBArB8D,+CAqBsB;AAAA,QAA3DxE,eAA2D,UAA/DH,EAA+D;AAAA,QAAjCgH,aAAiC,UAA1CD,OAA0C;AAAA,QAAlBzF,IAAkB,UAAlBA,IAAkB;AAAA,QAAVjE,EAAU,UAAVA,EAAU;AAAA,QAANqC,GAAM,UAANA,GAAM;;;AAElF,QAAIhC,YAAJ;AACA,QAAKA,MAAMQ,kBAAkB,EAACoD,UAAD,EAAlB,CAAX,EAAuC;AACrC,aAAO,0BAAiB5D,GAAjB,CAAP;AACD;AACD,QAAKA,MAAM+B,gBAAgBC,GAAhB,CAAX,EAAkC;AAChC,aAAO,0BAAiBhC,GAAjB,CAAP;AACD;AACD,QAAKA,MAAMwC,eAAeC,eAAf,EAAgCT,IAAIC,IAAJ,CAASS,UAAzC,CAAX,EAAkE;AAChE,aAAO,0BAAiB1C,GAAjB,CAAP;AACD;;AAXiF,0BAarD,gCAAayC,eAAb,CAbqD;AAAA,QAavEE,cAbuE,mBAa3EL,EAb2E;;AAAA,0BAcvD,gCAAagH,aAAb,CAduD;AAAA,QAcvErF,YAduE,mBAc3E3B,EAd2E;;AAgBlF,WAAO,IAAI1C,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9B,aAAOF,GAAGG,UAAH,CAAcR,qBAAd,EACJ4H,aADI,CAEF;AACCnE,aAAK,sBAAaJ,cAAb,CADN;AAEC,sBAAc,sBAAasB,YAAb;AAFf,OAFE,EAMH,EANG,EAOF;AACCkD,cAAM;AACJ,2BAAiBvD;AADb;AADP,OAPE,EAYF;AACCyD,aAAK;AADN,OAZE,EAeH,UAACrH,GAAD,UAA2B;AAAA,YAAbkD,OAAa,UAApBoE,KAAoB;;AACzB,eAAOzH,QAAQqD,OAAR,CAAP;AACD,OAjBE,CAAP;AAmBD,KApBM,CAAP;AAqBD;AA1D6D,CAA7B,CAAnC;;AA6DA,IAAMqG,6BAA6B,gDAA6B;AAC9D3F,QAAM,oBADwD;AAE9DkD,eAAa;AACXxE,QAAI,EAACe,MAAM,+CAAP,EADO;AAEXgG,aAAS,EAAChG,MAAM,+CAAP;AAFE,GAFiD;AAM9D0D,gBAAc;AACZH,YAAQ;AACNvD,YAAME,UADA;AAEN1D,aAFM,qBAEI;AACR,eAAOgD,WAAP;AACD;AAJK,KADI;AAOZmE,WAAO;AACL3D,YAAMG,WADD;AAEL3D,aAFK,mBAEG8G,IAFH,EAES;AACZ,eAAOA,IAAP;AACD;AAJI;AAPK,GANgD;AAoB9DM,qBApB8D,+CAoBgB;AAAA,QAArDxE,eAAqD,UAAzDH,EAAyD;AAAA,QAA3BgH,aAA2B,UAApCD,OAAoC;AAAA,QAAV1J,EAAU,UAAVA,EAAU;AAAA,QAANqC,GAAM,UAANA,GAAM;;;AAE5E,QAAIhC,YAAJ;AACA,QAAKA,MAAM+B,gBAAgBC,GAAhB,CAAX,EAAkC;AAChC,aAAO,0BAAiBhC,GAAjB,CAAP;AACD;AACD,QAAKA,MAAMwC,eAAeC,eAAf,EAAgCT,IAAIC,IAAJ,CAASS,UAAzC,CAAX,EAAkE;AAChE,aAAO,0BAAiB1C,GAAjB,CAAP;AACD;;AAR2E,0BAU/C,gCAAayC,eAAb,CAV+C;AAAA,QAUjEE,cAViE,mBAUrEL,EAVqE;;AAAA,0BAWjD,gCAAagH,aAAb,CAXiD;AAAA,QAWjErF,YAXiE,mBAWrE3B,EAXqE;;AAa5E,WAAO,IAAI1C,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9B,aAAOF,GAAGG,UAAH,CAAcR,qBAAd,EACJ4H,aADI,CAEH,EAACnE,KAAK,sBAAaJ,cAAb,CAAN,EAFG,EAGH,EAHG,EAIF;AACCkG,eAAO;AACLtD,kBAAQ;AACNxC,iBAAK,sBAAakB,YAAb;AADC;AADH;AADR,OAJE,EAWF;AACCoD,aAAK;AADN,OAXE,EAcH,UAACrH,GAAD,UAA2B;AAAA,YAAbkD,OAAa,UAApBoE,KAAoB;;AACzB,eAAOzH,QAAQqD,OAAR,CAAP;AACD,OAhBE,CAAP;AAkBD,KAnBM,CAAP;AAoBD;AArD6D,CAA7B,CAAnC;;AAwDA,IAAMsG,+BAA+B,gDAA6B;AAChE5F,QAAM,sBAD0D;AAEhEkD,eAAa;AACXxE,QAAI,EAACe,MAAM,+CAAP,EADO;AAEXoG,UAAM,EAACpG,4BAAD;AAFK,GAFmD;AAMhE0D,gBAAc;AACZH,YAAQ;AACNvD,YAAME,UADA;AAEN1D,aAFM,qBAEI;AACR,eAAOgD,WAAP;AACD;AAJK,KADI;AAOZmE,WAAO;AACL3D,YAAMG,WADD;AAEL3D,aAFK,mBAEG8G,IAFH,EAES;AACZ,eAAOA,IAAP;AACD;AAJI;AAPK,GANkD;AAoBhEM,qBApBgE,+CAoBV;AAAA,QAA7BxE,eAA6B,UAAjCH,EAAiC;AAAA,QAAV3C,EAAU,UAAVA,EAAU;AAAA,QAANqC,GAAM,UAANA,GAAM;;;AAEpD,QAAIhC,YAAJ;AACA,QAAKA,MAAM+B,gBAAgBC,GAAhB,CAAX,EAAkC;AAChC,aAAO,0BAAiBhC,GAAjB,CAAP;AACD;AACD,QAAKA,MAAMwC,eAAeC,eAAf,EAAgCT,IAAIC,IAAJ,CAASS,UAAzC,CAAX,EAAkE;AAChE,aAAO,0BAAiB1C,GAAjB,CAAP;AACD;;AARmD,0BAUvB,gCAAayC,eAAb,CAVuB;AAAA,QAUzCE,cAVyC,mBAU7CL,EAV6C;;AAYpD,WAAO,IAAI1C,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9B,aAAO,aAAG6J,SAAH,CACL,eAAKC,IAAL,CAAUC,QAAQC,GAAR,EAAV,EAAyB,OAAzB,EAAkClH,cAAlC,CADK,EAELX,IAAIyH,IAAJ,CAASK,MAFJ,EAGL,YAAM;AACJ,eAAOjK,QAAQ,IAAR,CAAP;AACD,OALI,CAAP;AAOD,KARM,EAUN0B,IAVM,CAUD,YAAM;AACV,aAAO,IAAI3B,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9B,eAAOF,GAAGG,UAAH,CAAcR,qBAAd,EACJ4H,aADI,CAEH,EAACnE,KAAK,sBAAaJ,cAAb,CAAN,EAFG,EAGH,EAHG,EAIF;AACCwE,gBAAM;AACJ7B,kCAAoB3C;AADhB;AADP,SAJE,EASF;AACC0E,eAAK;AADN,SATE,EAYH,UAACrH,GAAD,UAA2B;AAAA,cAAbkD,OAAa,UAApBoE,KAAoB;;AACzB,iBAAOzH,QAAQqD,OAAR,CAAP;AACD,SAdE,CAAP;AAgBD,OAjBM,CAAP;AAkBD,KA7BM,CAAP;AA8BD;AA9D+D,CAA7B,CAArC;;AAiEA,IAAM6G,eAAe,+BAAsB;AACzCnG,QAAM,UADmC;AAEzCC,QAFyC,oBAEhC;AACP,WAAO;AACLmG,kBAAYnD,kBADP;AAELoD,kBAAYzC,kBAFP;AAGL0C,kBAAYzC,kBAHP;AAIL0C,kBAAYtC,kBAJP;AAKLuC,mBAAanC,mBALR;AAMLoC,yBAAmBlC,yBANd;AAOLmC,qBAAelC,qBAPV;AAQLmC,+BAAyBlC,+BARpB;AASLmC,+BAAyB/B,+BATpB;AAULgC,+BAAyB7B,+BAVpB;AAWL8B,8BAAwB5B,8BAXnB;AAYL6B,8BAAwB5B,8BAZnB;AAaL6B,8BAAwB1B,8BAbnB;AAcL2B,0BAAoB1B,0BAdf;AAeL2B,0BAAoB1B,0BAff;AAgBL2B,0BAAoBxB,0BAhBf;AAiBLyB,4BAAsBxB;AAjBjB,KAAP;AAmBD;AAtBwC,CAAtB,CAArB;;AAyBA,IAAMyB,aAAa,2BAAkB;AACnCxL,SAAOiH,SAD4B;AAEnCwE,YAAUnB;AAFyB,CAAlB,CAAnB;;AAKA,IAAMoB,YAAY,SAAZA,SAAY,CAACxL,EAAD,EAAQ;AACxBN,QAAMM,EAAN;;AAEA,SAAOsL,UAAP;AACD,CAJD;;QAOEE,S,GAAAA,S","file":"index.js","sourcesContent":["'use strict';\n\nimport {\n  GraphQLSchema,\n  GraphQLObjectType,\n  GraphQLID,\n  GraphQLString,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLError\n} from 'graphql';\nimport {\n  nodeDefinitions,\n  fromGlobalId,\n  globalIdField,\n  connectionDefinitions,\n  connectionArgs,\n  connectionFromPromisedArray,\n  mutationWithClientMutationId\n} from 'graphql-relay';\nimport {ObjectID} from 'mongodb';\nimport passport from 'passport';\nimport emailValidator from 'email-validator';\nimport bcryptjs from 'bcryptjs';\nimport passwordGenerator from 'password-generator';\nimport fs from 'fs';\nimport path from 'path';\n\nimport {userCrudMailSend} from '../mailer';\n\nlet _db;\nconst profileCollectionName = 'profile';\nconst userCollectionName = 'user';\n\nconst entityGet = (query, collectionName, db) => {\n  return new Promise((resolve) => {\n    return db.collection(collectionName)\n      .findOne(\n        query,\n        (err, entity) => {\n          return resolve(entity);\n        }\n      );\n  });\n};\n\nconst promisedArrayGet = (query, sort, limit, collectionName, db) => {\n  return new Promise((resolve) => {\n    return db.collection(collectionName)\n      .find(query)\n      .sort(sort)\n      .limit(limit)\n      .toArray((err, entities) => {\n        return resolve(entities);\n      });\n  });\n};\n\nconst inputPresentCheck = (input) => {\n  return Object.keys(input)\n    .reduce((memo, key) => {\n      if (!memo) {\n        if (!input[key]) {\n          return {\n            message: 'input required',\n            source: key\n          };\n        }\n\n        return null;\n      }\n\n      return memo;\n\n    }, null);\n};\n\nconst emailValidCheck = (email) => {\n  return (emailValidator.validate(email)) ?\n    null :\n    ({\n      message: 'invalid',\n      source: 'email'\n    });\n};\n\nconst entityCountGet = (query, collectionName, db) => {\n  return new Promise((resolve) => {\n    return db.collection(collectionName)\n      .find(query)\n      .count((err, count) => {\n        return resolve(count);\n      });\n  });\n};\n\nconst userUniqueCheck = (email, db) => {\n  return entityCountGet(\n    {email},\n    userCollectionName,\n    db\n  )\n    .then((count) => {\n      if (count) {\n        return {\n          message: 'registered',\n          source: 'email'\n        };\n      }\n\n      return null;\n    });\n};\n\nconst userRegisteredCheck = (email, db) => {\n  return entityCountGet(\n    {email},\n    userCollectionName,\n    db\n  )\n    .then((count) => {\n      if (!count) {\n        return {\n          message: 'not registered',\n          source: 'email'\n        };\n      }\n\n      return null;\n    });\n};\n\nconst passwordHash = (password) => {\n  const salt = bcryptjs.genSaltSync(4);\n  return bcryptjs.hashSync(password, salt);\n};\n\nconst passwordGenerate = () => {\n  return passwordGenerator();\n};\n\nconst isSignedinCheck = (req) => {\n  return (!req.user) ?\n    ({\n      message: 'not signedin',\n      source: 'auth'\n    }) :\n    null;\n};\n\nconst isTheUserCheck = (userGlobalId, _userId) => {\n  const {id: userLocalId} = fromGlobalId(userGlobalId);\n\n  return (userLocalId.toString() !== _userId.toString()) ?\n    ({\n      message: 'not authorised',\n      source: 'auth'\n    }) :\n    null;\n};\n\nconst isCreatorCheck = (profileGlobalId, _profileId) => {\n  const {id: profileLocalId} = fromGlobalId(profileGlobalId);\n\n  return (profileLocalId.toString() !== _profileId.toString()) ?\n    ({\n      message: 'not authorised',\n      source: 'auth'\n    }) :\n    null;\n};\n\nclass Viewer extends Object {}\nconst viewerGet = () => {\n  return Object.assign(\n    new Viewer(),\n    {\n      _id: 'Viewer'\n    }\n  );\n};\n\nclass Profile extends Object {}\nconst profileGet = (profileLocalId) => {\n  return entityGet(profileLocalId, profileCollectionName, _db)\n    .then((profile) => {\n      return Object.assign(\n        new Profile(),\n        profile\n      );\n    });\n};\n\nconst {\n  nodeInterface,\n  nodeField\n} = nodeDefinitions(\n  (globalId) => {\n    const {id: localId, type} = fromGlobalId(globalId);\n\n    switch (type) {\n      case 'Viewer':\n        return viewerGet(localId);\n      case 'Profile':\n        return profileGet(localId);\n      default:\n        return null;\n    }\n  },\n  (obj) => {\n    switch (true) {\n      case (obj instanceof Viewer):\n        return viewerType;\n      case (obj instanceof Profile):\n        return profileType;\n      default:\n        return null;\n    }\n  }\n);\n\nconst languageType = new GraphQLObjectType({\n  name: 'Language',\n  fields() {\n    return {\n      language: {type: GraphQLString},\n      level: {type: GraphQLString}\n    };\n  }\n});\n\nconst skillType = new GraphQLObjectType({\n  name: 'Skill',\n  fields() {\n    return {\n      id: globalIdField('Skill', ({_id: skillLocalId}) => {\n        return skillLocalId;\n      }),\n      _id: {type: GraphQLID},\n      name: {type: GraphQLString},\n      recommendations: {type: GraphQLString}\n    };\n  }\n});\n\nconst experienceType = new GraphQLObjectType({\n  name: 'Experience',\n  fields() {\n    return {\n      id: globalIdField('Experience', ({_id: experienceLocalId}) => {\n        return experienceLocalId;\n      }),\n      _id: {type: GraphQLID},\n      company: {type: GraphQLString},\n      description: {type: GraphQLString},\n      country: {type: GraphQLString},\n      region: {type: GraphQLString},\n      location: {type: GraphQLString},\n      since: {type: GraphQLString},\n      title: {type: GraphQLString},\n      until: {type: GraphQLString}\n    };\n  }\n});\n\nconst educationType = new GraphQLObjectType({\n  name: 'Education',\n  fields() {\n    return {\n      id: globalIdField('Education', ({_id: educationLocalId}) => {\n        return educationLocalId;\n      }),\n      _id: {type: GraphQLID},\n      major: {type: GraphQLString},\n      date: {type: GraphQLString},\n      degree: {type: GraphQLString},\n      title: {type: GraphQLString}\n    };\n  }\n});\n\nconst profileType = new GraphQLObjectType({\n  name: 'Profile',\n  fields() {\n    return {\n      id: globalIdField('Profile', ({_id: profileLocalId}) => {\n        return profileLocalId;\n      }),\n      _id: {type: GraphQLID},\n      fullName: {type: GraphQLString},\n      industry: {type: GraphQLString},\n      languages: {type: new GraphQLList(languageType)},\n      previousCompanies: {type: new GraphQLList(GraphQLString)},\n      profilePicture: {type: GraphQLString},\n      skills: {type: new GraphQLList(skillType)},\n      title: {type: GraphQLString},\n      experiences: {type: new GraphQLList(experienceType)},\n      educations: {type: new GraphQLList(educationType)},\n      currentCompany: {type: GraphQLString},\n      educationTitle: {type: GraphQLString},\n      country: {type: GraphQLString},\n      region: {type: GraphQLString}\n    };\n  },\n  interfaces: [nodeInterface]\n});\n\nconst {\n  connectionType: profileConnectionType\n} = connectionDefinitions({\n  name: 'Profile',\n  nodeType: profileType\n});\n\nconst userType = new GraphQLObjectType({\n  name: 'User',\n  fields() {\n    return {\n      id: globalIdField('User', ({_id: userLocalId}) => {\n        return userLocalId;\n      }),\n      _id: {type: GraphQLID},\n      email: {type: GraphQLString},\n      password: {type: GraphQLString},\n      profileId: globalIdField('Profile', ({_profileId: profileLocalId}) => {\n        return profileLocalId;\n      }),\n      _profileId: {type: GraphQLID}\n    };\n  }\n});\n\nconst viewerType = new GraphQLObjectType({\n  name: 'Viewer',\n  fields() {\n    return {\n      id: globalIdField('Viewer', ({_id: viewerLocalId}) => {\n        return viewerLocalId;\n      }),\n      _id: {type: GraphQLID},\n      user: {\n        type: userType,\n        resolve(parent, args, {req: {user}}) {\n          return user || {};\n        }\n      },\n      profile: {\n        type: profileConnectionType,\n        args: {\n          id: {type: GraphQLID},\n          searchTerm: {type: GraphQLString},\n          ...connectionArgs\n        },\n        resolve(parent, {id: profileGlobalId, searchTerm, ...connectionArgs}, {db}) {\n          const query = (() => {\n            const q = {};\n\n            if (profileGlobalId) {\n              const {id: profileLocalId} = fromGlobalId(profileGlobalId);\n\n              Object.assign(\n                q,\n                {_id: new ObjectID(profileLocalId)}\n              );\n            }\n\n            if (searchTerm) {\n              Object.assign(\n                q,\n                {\n                  $text: {\n                    $search: `\\\"${searchTerm}\\\"`\n                  }\n                }\n              );\n            }\n\n            return q;\n          })();\n          const sort = {_id: -1};\n          const limit = 0;\n\n          return connectionFromPromisedArray(\n            promisedArrayGet(\n              query,\n              sort,\n              limit,\n              profileCollectionName,\n              db\n            ),\n            connectionArgs\n          );\n        }\n      }\n    };\n  },\n  interfaces: [nodeInterface]\n});\n\nconst queryType = new GraphQLObjectType({\n  name: 'Query',\n  fields() {\n    return {\n      node: nodeField,\n      viewer: {\n        type: viewerType,\n        resolve() {\n          return viewerGet();\n        }\n      }\n    };\n  }\n});\n\nconst UserCreateMutation = mutationWithClientMutationId({\n  name: 'UserCreate',\n  inputFields: {\n    email: {type: new GraphQLNonNull(GraphQLString)},\n    password: {type: new GraphQLNonNull(GraphQLString)}\n  },\n  outputFields: {\n    viewer: {\n      type: viewerType,\n      resolve() {\n        return viewerGet();\n      }\n    },\n    field: {\n      type: userType,\n      resolve(node) {\n        return node;\n      }\n    }\n  },\n  async mutateAndGetPayload({email, password}, {db, req}) {\n\n    let err;\n    if ((err = inputPresentCheck({email, password}))) {\n      return new GraphQLError(err);\n    }\n    if ((err = emailValidCheck(email))) {\n      return new GraphQLError(err);\n    }\n    if ((err = await userUniqueCheck(email, db))) {\n      return new GraphQLError(err);\n    }\n\n    const _profileId = new ObjectID();\n\n    return new Promise((resolve) => {\n      return db.collection(profileCollectionName)\n        .findAndModify(\n          {_id: _profileId},\n          [],\n          ({\n            $set: {\n              fullName: null,\n              industry: null,\n              languages: [],\n              previousCompanies: [],\n              profilePicture: null,\n              skills: [],\n              title: null,\n              experiences: [],\n              educations: [],\n              currentCompany: null,\n              educationTitle: null,\n              country: null,\n              region: null\n            }\n          }),\n          ({\n            upsert: true,\n            new: true\n          }),\n          (err, {value: profile}) => {\n            return resolve(profile);\n          }\n        );\n    })\n\n    .then(() => {\n      return new Promise((resolve) => {\n        return db.collection(userCollectionName)\n          .findAndModify(\n            {_id: new ObjectID()},\n            [],\n            ({\n              $set: {\n                email,\n                password: passwordHash(password),\n                _profileId\n              }\n            }),\n            ({\n              upsert: true,\n              new: true\n            }),\n            (err,  {value: user}) => {\n              req.logIn(user, () => {\n                userCrudMailSend(\n                  'userCreate',\n                  email,\n                  password\n                );\n                return resolve(user);\n              });\n            }\n          );\n      });\n    });\n  }\n});\n\nconst UserUpdateMutation = mutationWithClientMutationId({\n  name: 'UserUpdate',\n  inputFields: {\n    id: {type: new GraphQLNonNull(GraphQLID)},\n    email: {type: new GraphQLNonNull(GraphQLString)},\n    password: {type: new GraphQLNonNull(GraphQLString)}\n  },\n  outputFields: {\n    viewer: {\n      type: viewerType,\n      resolve() {\n        return viewerGet();\n      }\n    },\n    field: {\n      type: userType,\n      resolve(node) {\n        return node;\n      }\n    }\n  },\n  async mutateAndGetPayload({id: userGlobalId, email, password}, {db, req}) {\n\n    let err;\n    if ((err = inputPresentCheck({email, password}))) {\n      return new GraphQLError(err);\n    }\n    if ((err = isSignedinCheck(req))) {\n      return new GraphQLError(err);\n    }\n    if ((err = isTheUserCheck(userGlobalId, req.user._id))) {\n      return new GraphQLError(err);\n    }\n    if ((err = emailValidCheck(email))) {\n      return new GraphQLError(err);\n    }\n    if (email !== req.user.email &&\n        (err = await userUniqueCheck(email, db))) {\n      return new GraphQLError(err);\n    }\n\n    const {id: userLocalId} = fromGlobalId(userGlobalId);\n\n    return new Promise((resolve) => {\n      return db.collection(userCollectionName)\n        .findAndModify(\n          {_id: new ObjectID(userLocalId)},\n          [],\n          ({\n            $set: {\n              email,\n              password: passwordHash(password)\n            }\n          }),\n          ({\n            new: true\n          }),\n          (err, {value: user}) => {\n            req.logIn(user, () => {\n              userCrudMailSend(\n                'userUpdate',\n                email,\n                password\n              );\n              return resolve(user);\n            });\n          }\n        );\n    });\n  }\n});\n\nconst UserDeleteMutation = mutationWithClientMutationId({\n  name: 'UserDelete',\n  inputFields: {\n    id: {type: new GraphQLNonNull(GraphQLID)}\n  },\n  outputFields: {\n    viewer: {\n      type: viewerType,\n      resolve() {\n        return viewerGet();\n      }\n    },\n    field: {\n      type: userType,\n      resolve() {\n        return {};\n      }\n    }\n  },\n  mutateAndGetPayload({id: userGlobalId}, {db, req}) {\n\n    let err;\n    if ((err = isSignedinCheck(req))) {\n      return new GraphQLError(err);\n    }\n    if ((err = isTheUserCheck(userGlobalId, req.user._id))) {\n      return new GraphQLError(err);\n    }\n\n    const {id: userLocalId} = fromGlobalId(userGlobalId);\n\n    return new Promise((resolve) => {\n      return db.collection(profileCollectionName)\n        .findAndModify(\n          {_id: new ObjectID(req.user._profileId)},\n          [],\n          {},\n          {remove: true},\n          () => {\n            return resolve(null);\n          }\n        );\n    })\n    .then(() => {\n      return new Promise((resolve) => {\n        return db.collection(userCollectionName)\n          .findAndModify(\n            {_id: new ObjectID(userLocalId)},\n            [],\n            {},\n            {remove: true},\n            (err, {value: user}) => {\n              userCrudMailSend(\n                'userDelete',\n                user.email,\n                undefined\n              );\n              req.logout();\n              return resolve(user);\n            }\n          );\n      });\n    });\n  }\n});\n\nconst UserSigninMutation = mutationWithClientMutationId({\n  name: 'UserSignin',\n  inputFields: {\n    email: {type: new GraphQLNonNull(GraphQLString)},\n    password: {type: new GraphQLNonNull(GraphQLString)}\n  },\n  outputFields: {\n    viewer: {\n      type: viewerType,\n      resolve() {\n        return viewerGet();\n      }\n    },\n    field: {\n      type: userType,\n      resolve(node) {\n        return node;\n      }\n    }\n  },\n  async mutateAndGetPayload({email, password}, {req}) {\n\n    let err;\n    if ((err = inputPresentCheck({email, password}))) {\n      return new GraphQLError(err);\n    }\n\n    return new Promise((resolve) => {\n      return passport.authenticate('local', (err, user, info) => {\n        if (info) {\n          return resolve(new GraphQLError(info));\n        }\n\n        return req.logIn(user, () => {\n          return resolve(user);\n        });\n      })({\n        ...req,\n        body: {\n          email,\n          password\n        }\n      });\n    });\n  }\n});\n\nconst UserSignoutMutation = mutationWithClientMutationId({\n  name: 'UserSignout',\n  inputFields: {},\n  outputFields: {\n    viewer: {\n      type: viewerType,\n      resolve() {\n        return viewerGet();\n      }\n    }\n  },\n  mutateAndGetPayload(_, {req}) {\n    req.logout();\n    return {};\n  }\n});\n\nconst UserPasswordResetMutation = mutationWithClientMutationId({\n  name: 'UserPasswordReset',\n  inputFields: {\n    email: {type: new GraphQLNonNull(GraphQLString)}\n  },\n  outputFields: {\n    viewer: {\n      type: viewerType,\n      resolve() {\n        return viewerGet();\n      }\n    },\n    field: {\n      type: userType,\n      resolve(node) {\n        return node;\n      }\n    }\n  },\n  async mutateAndGetPayload({email}, {db}) {\n\n    let err;\n    if ((err = inputPresentCheck({email}))) {\n      return new GraphQLError(err);\n    }\n\n    if ((err = await userRegisteredCheck(email, db))) {\n      return new GraphQLError(err);\n    }\n\n    const password = passwordGenerate();\n\n    return new Promise((resolve) => {\n      return db.collection(userCollectionName)\n        .findAndModify(\n          {email},\n          [],\n          ({\n            $set: {\n              password: passwordHash(password)\n            }\n          }),\n          ({\n            new: true\n          }),\n          (err, {value: user}) => {\n            userCrudMailSend(\n              'userPasswordReset',\n              user.email,\n              password\n            );\n            return resolve(user);\n          }\n        );\n    });\n  }\n});\n\nconst ProfileUpdateMutation = mutationWithClientMutationId({\n  name: 'ProfileUpdate',\n  inputFields: {\n    id: {type: new GraphQLNonNull(GraphQLID)},\n    fullName: {type: new GraphQLNonNull(GraphQLString)},\n    title: {type: new GraphQLNonNull(GraphQLString)},\n    currentCompany: {type: new GraphQLNonNull(GraphQLString)},\n    educationTitle: {type: new GraphQLNonNull(GraphQLString)},\n    country: {type: new GraphQLNonNull(GraphQLString)},\n    region: {type: new GraphQLNonNull(GraphQLString)}\n  },\n  outputFields: {\n    viewer: {\n      type: viewerType,\n      resolve() {\n        return viewerGet();\n      }\n    },\n    field: {\n      type: profileType,\n      resolve(node) {\n        return node;\n      }\n    }\n  },\n  mutateAndGetPayload(\n    {\n      id: profileGlobalId,\n      fullName,\n      title,\n      currentCompany,\n      educationTitle,\n      country,\n      region\n    },\n    {db, req}\n  ) {\n\n    let err;\n    if ((err = inputPresentCheck({\n      fullName,\n      title,\n      currentCompany,\n      educationTitle,\n      country,\n      region\n    }))) {\n      return new GraphQLError(err);\n    }\n    if ((err = isSignedinCheck(req))) {\n      return new GraphQLError(err);\n    }\n    if ((err = isCreatorCheck(profileGlobalId, req.user._profileId))) {\n      return new GraphQLError(err);\n    }\n\n    const {id: profileLocalId} = fromGlobalId(profileGlobalId);\n\n    return new Promise((resolve) => {\n      return db.collection(profileCollectionName)\n        .findAndModify(\n          {_id: new ObjectID(profileLocalId)},\n          [],\n          ({\n            $set: {\n              fullName,\n              title,\n              currentCompany,\n              educationTitle,\n              country,\n              region\n            }\n          }),\n          ({\n            new: true\n          }),\n          (err, {value: profile}) => {\n            return resolve(profile);\n          }\n        );\n    });\n  }\n});\n\nconst ProfileExperienceCreateMutation = mutationWithClientMutationId({\n  name: 'ProfileExperienceCreate',\n  inputFields: {\n    id: {type: new GraphQLNonNull(GraphQLID)},\n    company: {type: new GraphQLNonNull(GraphQLString)},\n    title: {type: new GraphQLNonNull(GraphQLString)},\n    description: {type: new GraphQLNonNull(GraphQLString)},\n    country: {type: new GraphQLNonNull(GraphQLString)},\n    region: {type: new GraphQLNonNull(GraphQLString)},\n    since: {type: new GraphQLNonNull(GraphQLString)},\n    until: {type: new GraphQLNonNull(GraphQLString)}\n  },\n  outputFields: {\n    viewer: {\n      type: viewerType,\n      resolve() {\n        return viewerGet();\n      }\n    },\n    field: {\n      type: profileType,\n      resolve(node) {\n        return node;\n      }\n    }\n  },\n  mutateAndGetPayload(\n    {id: profileGlobalId, company, title, description, country, region, since, until},\n    {db, req}\n  ) {\n\n    let err;\n    if ((err = inputPresentCheck({\n      company,\n      title,\n      country,\n      region,\n      since,\n      until,\n      description\n    }))) {\n      return new GraphQLError(err);\n    }\n    if ((err = isSignedinCheck(req))) {\n      return new GraphQLError(err);\n    }\n    if ((err = isCreatorCheck(profileGlobalId, req.user._profileId))) {\n      return new GraphQLError(err);\n    }\n\n    const {id: profileLocalId} = fromGlobalId(profileGlobalId);\n\n    return new Promise((resolve) => {\n      return db.collection(profileCollectionName)\n        .findAndModify(\n          {_id: new ObjectID(profileLocalId)},\n          [],\n          ({\n            $push: {\n              experiences: {\n                $each: [{\n                  _id: new ObjectID(),\n                  company,\n                  title,\n                  description,\n                  country,\n                  region,\n                  since,\n                  until\n                }],\n                $position: 0\n              }\n            }\n          }),\n          ({\n            new: true\n          }),\n          (err, {value: profile}) => {\n            return resolve(profile);\n          }\n        );\n    });\n  }\n});\n\nconst ProfileExperienceUpdateMutation = mutationWithClientMutationId({\n  name: 'ProfileExperienceUpdate',\n  inputFields: {\n    id: {type: new GraphQLNonNull(GraphQLID)},\n    experienceId: {type: new GraphQLNonNull(GraphQLID)},\n    company: {type: new GraphQLNonNull(GraphQLString)},\n    title: {type: new GraphQLNonNull(GraphQLString)},\n    description: {type: new GraphQLNonNull(GraphQLString)},\n    country: {type: new GraphQLNonNull(GraphQLString)},\n    region: {type: new GraphQLNonNull(GraphQLString)},\n    since: {type: new GraphQLNonNull(GraphQLString)},\n    until: {type: new GraphQLNonNull(GraphQLString)}\n  },\n  outputFields: {\n    viewer: {\n      type: viewerType,\n      resolve() {\n        return viewerGet();\n      }\n    },\n    field: {\n      type: profileType,\n      resolve(node) {\n        return node;\n      }\n    }\n  },\n  mutateAndGetPayload(\n    {\n      id: profileGlobalId,\n      experienceId: experienceGlobalId,\n      company,\n      title,\n      description,\n      country,\n      region,\n      since,\n      until\n    },\n    {db, req}\n  ) {\n\n    let err;\n    if ((err = inputPresentCheck({\n      company,\n      title,\n      country,\n      region,\n      since,\n      until,\n      description\n    }))) {\n      return new GraphQLError(err);\n    }\n    if ((err = isSignedinCheck(req))) {\n      return new GraphQLError(err);\n    }\n    if ((err = isCreatorCheck(profileGlobalId, req.user._profileId))) {\n      return new GraphQLError(err);\n    }\n\n    const {id: profileLocalId} = fromGlobalId(profileGlobalId);\n    const {id: experienceLocalId} = fromGlobalId(experienceGlobalId);\n\n    return new Promise((resolve) => {\n      return db.collection(profileCollectionName)\n        .findAndModify(\n          ({\n            _id: new ObjectID(profileLocalId),\n            'experiences._id': new ObjectID(experienceLocalId)\n          }),\n          [],\n          ({\n            $set: {\n              'experiences.$.company': company,\n              'experiences.$.title': title,\n              'experiences.$.country': country,\n              'experiences.$.region': region,\n              'experiences.$.since': since,\n              'experiences.$.until': until,\n              'experiences.$.description': description\n            }\n          }),\n          ({\n            new: true\n          }),\n          (err, {value: profile}) => {\n            return resolve(profile);\n          }\n        );\n    });\n  }\n});\n\nconst ProfileExperienceDeleteMutation = mutationWithClientMutationId({\n  name: 'ProfileExperienceDelete',\n  inputFields: {\n    id: {type: new GraphQLNonNull(GraphQLID)},\n    experienceId: {type: new GraphQLNonNull(GraphQLID)}\n  },\n  outputFields: {\n    viewer: {\n      type: viewerType,\n      resolve() {\n        return viewerGet();\n      }\n    },\n    field: {\n      type: profileType,\n      resolve(node) {\n        return node;\n      }\n    }\n  },\n  mutateAndGetPayload(\n    {id: profileGlobalId, experienceId: experienceGlobalId},\n    {db, req}\n  ) {\n\n    let err;\n    if ((err = isSignedinCheck(req))) {\n      return new GraphQLError(err);\n    }\n    if ((err = isCreatorCheck(profileGlobalId, req.user._profileId))) {\n      return new GraphQLError(err);\n    }\n\n    const {id: profileLocalId} = fromGlobalId(profileGlobalId);\n    const {id: experienceLocalId} = fromGlobalId(experienceGlobalId);\n\n    return new Promise((resolve) => {\n      return db.collection(profileCollectionName)\n        .findAndModify(\n          {_id: new ObjectID(profileLocalId)},\n          [],\n          ({\n            $pull: {\n              experiences: {\n                _id: new ObjectID(experienceLocalId)\n              }\n            }\n          }),\n          ({\n            new: true\n          }),\n          (err, {value: profile}) => {\n            return resolve(profile);\n          }\n        );\n    });\n  }\n});\n\nconst ProfileEducationCreateMutation = mutationWithClientMutationId({\n  name: 'ProfileEducationCreate',\n  inputFields: {\n    id: {type: new GraphQLNonNull(GraphQLString)},\n    date: {type: new GraphQLNonNull(GraphQLString)},\n    degree: {type: new GraphQLNonNull(GraphQLString)},\n    title: {type: new GraphQLNonNull(GraphQLString)}\n  },\n  outputFields: {\n    viewer: {\n      type: viewerType,\n      resolve() {\n        viewerGet();\n      }\n    },\n    field: {\n      type: profileType,\n      resolve(node) {\n        return node;\n      }\n    }\n  },\n  mutateAndGetPayload({id: profileGlobalId, date, degree, title}, {db, req}) {\n\n    let err;\n    if ((err = inputPresentCheck({\n      date,\n      degree,\n      title\n    }))) {\n      return new GraphQLError(err);\n    }\n    if ((err = isSignedinCheck(req))) {\n      return new GraphQLError(err);\n    }\n    if ((err = isCreatorCheck(profileGlobalId, req.user._profileId))) {\n      return new GraphQLError(err);\n    }\n\n    const {id: profileLocalId} = fromGlobalId(profileGlobalId);\n\n    return new Promise((resolve) => {\n      return db.collection(profileCollectionName)\n        .findAndModify(\n          {_id: new ObjectID(profileLocalId)},\n          [],\n          ({\n            $push: {\n              educations: {\n                $each: [{\n                  _id: new ObjectID(),\n                  date,\n                  degree,\n                  title\n                }],\n                $position: 0\n              }\n            }\n          }),\n          ({\n            new: true\n          }),\n          (err, {value: profile}) => {\n            return resolve(profile);\n          }\n        );\n    });\n  }\n});\n\nconst ProfileEducationUpdateMutation = mutationWithClientMutationId({\n  name: 'ProfileEducationUpdate',\n  inputFields: {\n    id: {type: new GraphQLNonNull(GraphQLID)},\n    educationId: {type: new GraphQLNonNull(GraphQLID)},\n    date: {type: new GraphQLNonNull(GraphQLString)},\n    degree: {type: new GraphQLNonNull(GraphQLString)},\n    title: {type: new GraphQLNonNull(GraphQLString)}\n  },\n  outputFields: {\n    viewer: {\n      type: viewerType,\n      resolve() {\n        return viewerGet();\n      }\n    },\n    field: {\n      type: profileType,\n      resolve(node) {\n        return node;\n      }\n    }\n  },\n  mutateAndGetPayload(\n    {id: profileGlobalId, educationId: educationGlobalId, date, degree, title},\n    {db, req}\n  ) {\n\n    let err;\n    if ((err = inputPresentCheck({\n      date,\n      degree,\n      title\n    }))) {\n      return new GraphQLError(err);\n    }\n    if ((err = isSignedinCheck(req))) {\n      return new GraphQLError(err);\n    }\n    if ((err = isCreatorCheck(profileGlobalId, req.user._profileId))) {\n      return new GraphQLError(err);\n    }\n\n    const {id: profileLocalId} = fromGlobalId(profileGlobalId);\n    const {id: educationLocalId} = fromGlobalId(educationGlobalId);\n\n    return new Promise((resolve) => {\n      return db.collection(profileCollectionName)\n        .findAndModify(\n          ({\n            _id: new ObjectID(profileLocalId),\n            'educations._id': new ObjectID(educationLocalId)\n          }),\n          [],\n          ({\n            $set: {\n              'educations.$.date': date,\n              'educations.$.degree': degree,\n              'educations.$.title': title\n            }\n          }),\n          ({\n            new: true\n          }),\n          (err, {value: profile}) => {\n            return resolve(profile);\n          }\n        );\n    });\n  }\n});\n\nconst ProfileEducationDeleteMutation = mutationWithClientMutationId({\n  name: 'ProfileEducationDelete',\n  inputFields: {\n    id: {type: new GraphQLNonNull(GraphQLID)},\n    educationId: {type: new GraphQLNonNull(GraphQLID)}\n  },\n  outputFields: {\n    viewer: {\n      type: viewerType,\n      resolve() {\n        return viewerGet();\n      }\n    },\n    field: {\n      type: profileType,\n      resolve(node) {\n        return node;\n      }\n    }\n  },\n  mutateAndGetPayload(\n    {id: profileGlobalId, educationId: educationGlobalId},\n    {db, req}\n  ) {\n\n    let err;\n    if ((err = isSignedinCheck(req))) {\n      return new GraphQLError(err);\n    }\n    if ((err = isCreatorCheck(profileGlobalId, req.user._profileId))) {\n      return new GraphQLError(err);\n    }\n\n    const {id: profileLocalId} = fromGlobalId(profileGlobalId);\n    const {id: educationLocalId} = fromGlobalId(educationGlobalId);\n\n    return new Promise((resolve) => {\n      return db.collection(profileCollectionName)\n        .findAndModify(\n          {_id: new ObjectID(profileLocalId)},\n          [],\n          ({\n            $pull: {\n              educations: {\n                _id: new ObjectID(educationLocalId)\n              }\n            }\n          }),\n          ({\n            new: true\n          }),\n          (err, {value: profile}) => {\n            return resolve(profile);\n          }\n        );\n    });\n  }\n});\n\nconst ProfileSkillCreateMutation = mutationWithClientMutationId({\n  name: 'ProfileSkillCreate',\n  inputFields: {\n    id: {type: new GraphQLNonNull(GraphQLID)},\n    name: {type: new GraphQLNonNull(GraphQLID)}\n  },\n  outputFields: {\n    viewer: {\n      type: viewerType,\n      resolve() {\n        return viewerGet();\n      }\n    },\n    field: {\n      type: profileType,\n      resolve(node) {\n        return node;\n      }\n    }\n  },\n  mutateAndGetPayload({id: profileGlobalId, name}, {db, req}) {\n\n    let err;\n    if ((err = inputPresentCheck({name}))) {\n      return new GraphQLError(err);\n    }\n    if ((err = isSignedinCheck(req))) {\n      return new GraphQLError(err);\n    }\n    if ((err = isCreatorCheck(profileGlobalId, req.user._profileId))) {\n      return new GraphQLError(err);\n    }\n\n    const {id: profileLocalId} = fromGlobalId(profileGlobalId);\n\n    return new Promise((resolve) => {\n      return db.collection(profileCollectionName)\n        .findAndModify(\n          {_id: new ObjectID(profileLocalId)},\n          [],\n          ({\n            $push: {\n              skills: {\n                $each: [{\n                  _id: new ObjectID(),\n                  name\n                }],\n                $position: 0\n              }\n            }\n          }),\n          ({\n            new: true\n          }),\n          (err, {value: profile}) => {\n            return resolve(profile);\n          }\n        );\n    });\n  }\n});\n\nconst ProfileSkillUpdateMutation = mutationWithClientMutationId({\n  name: 'ProfileSkillUpdate',\n  inputFields: {\n    id: {type: new GraphQLNonNull(GraphQLID)},\n    skillId: {type: new GraphQLNonNull(GraphQLID)},\n    name: {type: new GraphQLNonNull(GraphQLString)}\n  },\n  outputFields: {\n    viewer: {\n      type: viewerType,\n      resolve() {\n        return viewerGet();\n      }\n    },\n    field: {\n      type: profileType,\n      resolve(node) {\n        return node;\n      }\n    }\n  },\n  mutateAndGetPayload({id: profileGlobalId, skillId: skillGlobalId, name}, {db, req}) {\n\n    let err;\n    if ((err = inputPresentCheck({name}))) {\n      return new GraphQLError(err);\n    }\n    if ((err = isSignedinCheck(req))) {\n      return new GraphQLError(err);\n    }\n    if ((err = isCreatorCheck(profileGlobalId, req.user._profileId))) {\n      return new GraphQLError(err);\n    }\n\n    const {id: profileLocalId} = fromGlobalId(profileGlobalId);\n    const {id: skillLocalId} = fromGlobalId(skillGlobalId);\n\n    return new Promise((resolve) => {\n      return db.collection(profileCollectionName)\n        .findAndModify(\n          ({\n            _id: new ObjectID(profileLocalId),\n            'skills._id': new ObjectID(skillLocalId)\n          }),\n          [],\n          ({\n            $set: {\n              'skills.$.name': name\n            }\n          }),\n          ({\n            new: true\n          }),\n          (err, {value: profile}) => {\n            return resolve(profile);\n          }\n        );\n    });\n  }\n});\n\nconst ProfileSkillDeleteMutation = mutationWithClientMutationId({\n  name: 'ProfileSkillDelete',\n  inputFields: {\n    id: {type: new GraphQLNonNull(GraphQLID)},\n    skillId: {type: new GraphQLNonNull(GraphQLID)}\n  },\n  outputFields: {\n    viewer: {\n      type: viewerType,\n      resolve() {\n        return viewerGet();\n      }\n    },\n    field: {\n      type: profileType,\n      resolve(node) {\n        return node;\n      }\n    }\n  },\n  mutateAndGetPayload({id: profileGlobalId, skillId: skillGlobalId}, {db, req}) {\n\n    let err;\n    if ((err = isSignedinCheck(req))) {\n      return new GraphQLError(err);\n    }\n    if ((err = isCreatorCheck(profileGlobalId, req.user._profileId))) {\n      return new GraphQLError(err);\n    }\n\n    const {id: profileLocalId} = fromGlobalId(profileGlobalId);\n    const {id: skillLocalId} = fromGlobalId(skillGlobalId);\n\n    return new Promise((resolve) => {\n      return db.collection(profileCollectionName)\n        .findAndModify(\n          {_id: new ObjectID(profileLocalId)},\n          [],\n          ({\n            $pull: {\n              skills: {\n                _id: new ObjectID(skillLocalId)\n              }\n            }\n          }),\n          ({\n            new: true\n          }),\n          (err, {value: profile}) => {\n            return resolve(profile);\n          }\n        );\n    });\n  }\n});\n\nconst ProfilePictureUpdateMutation = mutationWithClientMutationId({\n  name: 'ProfilePictureUpdate',\n  inputFields: {\n    id: {type: new GraphQLNonNull(GraphQLID)},\n    file: {type: GraphQLString}\n  },\n  outputFields: {\n    viewer: {\n      type: viewerType,\n      resolve() {\n        return viewerGet();\n      }\n    },\n    field: {\n      type: profileType,\n      resolve(node) {\n        return node;\n      }\n    }\n  },\n  mutateAndGetPayload({id: profileGlobalId}, {db, req}) {\n\n    let err;\n    if ((err = isSignedinCheck(req))) {\n      return new GraphQLError(err);\n    }\n    if ((err = isCreatorCheck(profileGlobalId, req.user._profileId))) {\n      return new GraphQLError(err);\n    }\n\n    const {id: profileLocalId} = fromGlobalId(profileGlobalId);\n\n    return new Promise((resolve) => {\n      return fs.writeFile(\n        path.join(process.cwd(), 'media', profileLocalId),\n        req.file.buffer,\n        () => {\n          return resolve(null);\n        }\n      );\n    })\n\n    .then(() => {\n      return new Promise((resolve) => {\n        return db.collection(profileCollectionName)\n          .findAndModify(\n            {_id: new ObjectID(profileLocalId)},\n            [],\n            ({\n              $set: {\n                profilePicture: `/${profileLocalId}`\n              }\n            }),\n            ({\n              new: true\n            }),\n            (err, {value: profile}) => {\n              return resolve(profile);\n            }\n          );\n      });\n    });\n  }\n});\n\nconst mutationType = new GraphQLObjectType({\n  name: 'Mutation',\n  fields() {\n    return {\n      userCreate: UserCreateMutation,\n      userUpdate: UserUpdateMutation,\n      userDelete: UserDeleteMutation,\n      userSignin: UserSigninMutation,\n      userSignout: UserSignoutMutation,\n      userPasswordReset: UserPasswordResetMutation,\n      profileUpdate: ProfileUpdateMutation,\n      profileExperienceCreate: ProfileExperienceCreateMutation,\n      profileExperienceUpdate: ProfileExperienceUpdateMutation,\n      profileExperienceDelete: ProfileExperienceDeleteMutation,\n      profileEducationCreate: ProfileEducationCreateMutation,\n      profileEducationUpdate: ProfileEducationUpdateMutation,\n      profileEducationDelete: ProfileEducationDeleteMutation,\n      profileSkillCreate: ProfileSkillCreateMutation,\n      profileSkillUpdate: ProfileSkillUpdateMutation,\n      profileSkillDelete: ProfileSkillDeleteMutation,\n      profilePictureUpdate: ProfilePictureUpdateMutation\n    };\n  }\n});\n\nconst schemaType = new GraphQLSchema({\n  query: queryType,\n  mutation: mutationType\n});\n\nconst schemaGet = (db) => {\n  _db = db;\n\n  return schemaType;\n};\n\nexport {\n  schemaGet\n};\n"]}