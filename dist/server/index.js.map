{"version":3,"sources":["../../js/server/index.js"],"names":["ip","process","env","OPENSHIFT_NODEJS_IP","port","OPENSHIFT_NODEJS_PORT","nodeEnv","NODE_ENV","mongourl","MONGODB_URL","MONGO_URL","profileCollectionName","userCollectionName","dbConnect","Promise","resolve","connect","err","db","console","log","dbDropIndexes","collection","dropIndexes","dbCreateIndex","ensureIndex","name","schemaUpdate","then","schema","writeFile","join","__dirname","JSON","stringify","passportUserSerializeDeserialize","serializeUser","done","userLocalId","_id","deserializeUser","findOne","user","passportLocalStrategyEnable","use","Strategy","usernameField","email","password","message","source","compareSync","set","static","secret","cookie","maxAge","store","resave","saveUninitialized","initialize","session","storage","memoryStorage","single","req","pretty","context","json","urlencoded","extended","get","res","render","htmlWebpackPlugin","options","title","listen"],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\n\nimport path from 'path';\nimport {MongoClient, ObjectID} from 'mongodb';\nimport express from 'express';\nimport expressGraphql from 'express-graphql';\nimport {graphql} from 'graphql';\nimport {introspectionQuery} from 'graphql/utilities';\nimport fs from 'fs';\nimport bodyParser from 'body-parser';\nimport cookieParser from 'cookie-parser';\nimport expressSession from 'express-session';\nimport connectMongo from 'connect-mongo';\nimport passport from 'passport';\nimport passportLocal from 'passport-local';\nimport bcryptjs from 'bcryptjs';\nimport multer from 'multer';\n\nimport {schemaGet} from './schema';\n\nconst ip = process.env.OPENSHIFT_NODEJS_IP ||\n  null;\nconst port = process.env.OPENSHIFT_NODEJS_PORT ||\n  3000;\nconst nodeEnv = process.env.NODE_ENV;\nconst mongourl = `${process.env.MONGODB_URL ||\n  process.env.MONGO_URL}vip`;\nconst profileCollectionName = 'profile';\nconst userCollectionName = 'user';\n\nconst dbConnect = (mongourl) => {\n  return new Promise((resolve) => {\n    return MongoClient.connect(\n      mongourl,\n      (err, db) => {\n        console.log(`dbConnect: ${mongourl}`);\n        return resolve(db);\n      }\n    );\n  });\n};\n\nconst dbDropIndexes = (db) => {\n  return new Promise((resolve) => {\n    return db.collection(profileCollectionName)\n      .dropIndexes(\n        () => {\n          console.log('dbDropIndexes');\n          return resolve(null);\n        }\n      );\n  });\n};\n\nconst dbCreateIndex = (db) => {\n  return new Promise((resolve) => {\n    return db.collection(profileCollectionName)\n      .ensureIndex(\n        ({\n          '$**': 'text'\n        }),\n        ({\n          name: 'profile_full_text',\n          'default_language': 'en',\n          'language_override': 'en'\n        }),\n        () => {\n          console.log('dbCreateIndex');\n          return resolve(null);\n        }\n      );\n  });\n};\n\nconst schemaUpdate = (db) => {\n  return new Promise((resolve) => {\n    return graphql(\n      schemaGet(db),\n      introspectionQuery\n    )\n      .then((schema) => {\n        return fs.writeFile(\n          path.join(__dirname, '../..', 'schema.json'),\n          JSON.stringify(schema, null, 2),\n          () => {\n            console.log('schemaUpdate');\n            return resolve(null);\n          }\n        );\n      });\n  });\n};\n\nconst passportUserSerializeDeserialize = (db) => {\n  passport.serializeUser(({_id: userLocalId}, done) => {\n    return done(null, userLocalId);\n  });\n\n  passport.deserializeUser((userLocalId, done) => {\n    db.collection(userCollectionName)\n      .findOne(\n        {_id: new ObjectID(userLocalId)},\n        (err, user) => {\n          return done(err, user);\n        }\n      );\n  });\n};\n\nconst passportLocalStrategyEnable = (db) => {\n  passport.use(\n    new passportLocal.Strategy(\n      {\n        usernameField: 'email'\n      },\n      (email, password, done) => {\n        db.collection(userCollectionName)\n          .findOne(\n            {email},\n            (err, user) => {\n              if (err) {\n                return done(err);\n              }\n\n              if (!user) {\n                return done(\n                  null,\n                  false,\n                  {\n                    message: 'incorrect',\n                    source: 'email'\n                  }\n                );\n              }\n\n              if (!bcryptjs.compareSync(password, user.password)) {\n                return done(\n                  null,\n                  false,\n                  {\n                    message: 'incorrect',\n                    source: 'password'\n                  }\n                );\n              }\n\n              return done(null, user);\n            }\n          );\n      }\n    )\n  );\n};\n\n(async () => {\n  const db = await dbConnect(mongourl);\n  await dbDropIndexes(db);\n  await dbCreateIndex(db);\n  await schemaUpdate(db);\n  passportUserSerializeDeserialize(db);\n  passportLocalStrategyEnable(db);\n\n  express()\n\n    .set('view engine', 'ejs')\n\n    .use(express.static(path.join(__dirname, '../..', 'media')))\n    .use(express.static(path.join(__dirname, '../..', 'dist/client')))\n\n    .use(cookieParser())\n    .use(expressSession({\n      secret: 'S3CR37',\n      cookie: {maxAge: 3600000 * 24 * 15},\n      store: new (connectMongo(expressSession))({db}),\n      resave: true,\n      saveUninitialized: true\n    }))\n\n    .use(passport.initialize())\n    .use(passport.session())\n\n    .use('/graphql', multer({storage: multer.memoryStorage()}).single('file'))\n\n    .use('/graphql', expressGraphql((req) => {\n      return {\n        schema: schemaGet(db),\n        pretty: true,\n        context: {req, db}\n      };\n    }))\n\n    .use(bodyParser.json())\n    .use(bodyParser.urlencoded({\n      extended: false\n    }))\n\n    .get('*', (req, res) => {\n      return res.render(\n        'index',\n        {\n          htmlWebpackPlugin: {\n            options: {\n              title: 'vip'\n            }\n          }\n        }\n      );\n    })\n\n    .listen(port, ip, () => {\n      console.log(`Listening at ${ip || 'LOCALHOST'}:${port} in ${nodeEnv} mode.`);\n    });\n})();\n"]}